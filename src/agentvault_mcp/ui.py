from __future__ import annotations

import io
from typing import List, Dict, Optional, Any

def _require_segno():
    try:
        import segno  # type: ignore
        return segno
    except Exception as e:
        raise RuntimeError(
            "QR generation requires 'segno'. Install optional extra: pip install 'agentvault-mcp[ui]'"
        ) from e


_STYLE = """
:root { --bg:#ffffff; --fg:#111111; --muted:#666666; --card:#ffffff; }
[data-theme="dark"] { --bg:#0c0c0c; --fg:#f5f5f5; --muted:#9a9a9a; --card:#111111; }
* { box-sizing: border-box; }
html, body { margin:0; padding:0; background:var(--bg); color:var(--fg);
  font: 16px/1.45 system-ui, -apple-system, Segoe UI, Roboto, Ubuntu,
    Cantarell, Noto Sans, Helvetica, Arial, sans-serif; }
.wrap { max-width: 880px; margin: 0 auto; padding: 24px; }
.card { border: 3px solid var(--fg); padding: 20px; margin: 16px 0;
  background:var(--card); }
.title { font-weight: 800; font-size: 28px; letter-spacing: .2px; }
.mono { font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas,
  "Liberation Mono", "Courier New", monospace; word-break: break-all; }
.grid { display: grid; grid-template-columns: 1fr 1fr; gap: 16px; }
.row { display:flex; gap:12px; align-items:center; flex-wrap:wrap; }
.label { color: var(--muted); min-width: 110px; }
.btn { display:inline-block; border:2px solid var(--fg); padding:8px 10px;
  text-decoration:none; color:var(--fg); background:transparent; cursor:pointer; }
.btn.small { font-size: 13px; padding:6px 8px; }
.qr { border:2px solid var(--fg); background:#fff; padding:8px; display:inline-block; }
.section { margin-top: 28px; }
.small { font-size: 13px; color: var(--muted); }
.topbar { display:flex; justify-content:space-between; align-items:center;
  margin-bottom: 16px; }
.badge { padding:4px 8px; border-radius:12px; font-size:12px; font-weight:600; }
.badge.ok { background:#d1fae5; color:#065f46; }
.badge.error { background:#fee2e2; color:#991b1b; }
"""


def _svg_qr_for_uri(uri: str) -> str:
    segno = _require_segno()
    qr = segno.make(uri, micro=False)
    buff = io.BytesIO()
    qr.save(buff, kind="svg", xmldecl=False)
    return buff.getvalue().decode('utf-8')


def tipjar_page_html(address: str, amount_eth: Optional[float] = None) -> str:
    uri = eth_uri(address, amount_eth)
    svg = _svg_qr_for_uri(uri)
    amt_txt = f" for {amount_eth} ETH" if amount_eth is not None else ""
    return f"""
<!doctype html>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Tip Jar</title>
<style>{_STYLE}</style>
<script>
// Theme toggle with localStorage
(function(){{
  const key = 'av-theme';
  const root = document.documentElement;
  const saved = localStorage.getItem(key);
  if(saved){{ root.setAttribute('data-theme', saved); }}
  else if(window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches){{
    root.setAttribute('data-theme','dark');
  }}
  window._avToggleTheme = function(){{
    const cur = root.getAttribute('data-theme')==='dark'?'light':'dark';
    root.setAttribute('data-theme', cur); localStorage.setItem(key, cur);
  }}
  window._avCopy = function(txt, el){{
    if(navigator.clipboard && navigator.clipboard.writeText){{
      navigator.clipboard.writeText(txt).then(()=>{{ if(el){{ el.innerText='Copied'; setTimeout(()=>el.innerText='Copy',1200); }} }});
    }} else {{
      const ta = document.createElement('textarea'); ta.value = txt;
      document.body.appendChild(ta); ta.select(); try{{ document.execCommand('copy'); }} finally{{ document.body.removeChild(ta); }}
      if(el){{ el.innerText='Copied'; setTimeout(()=>el.innerText='Copy',1200); }}
    }}
  }}
}})();
</script>
<div class="wrap">
  <div class="topbar">
    <div class="title">Tip Jar</div>
    <button class="btn small" onclick="_avToggleTheme()">Toggle Theme</button>
  </div>
  <div class="card">
    <div class="row">
      <div class="label">Address</div>
      <div class="mono">{address}</div>
      <button class="btn small" onclick="_avCopy('{address}', this)">Copy</button>
    </div>
    <div class="row">
      <div class="label">URI</div>
      <div class="mono">{uri}</div>
      <button class="btn small" onclick="_avCopy('{uri}', this)">Copy</button>
    </div>
    <div class="section">
      <div class="label">Scan to tip{amt_txt}</div>
      <div class="qr">{svg}</div>
    </div>
  </div>
  <div class="small">Generated by AgentVault MCP</div>
</div>
"""


def write_tipjar_page(path: str, address: str, amount_eth: Optional[float] = None) -> str:
    html = tipjar_page_html(address, amount_eth)
    with open(path, "w", encoding="utf-8") as f:
        f.write(html)
    return path


def eth_uri(address: str, amount_eth: Optional[float] = None) -> str:
    if amount_eth is None:
        return f"ethereum:{address}"
    wei = int(amount_eth * 10**18)
    return f"ethereum:{address}?value={wei}"


def dashboard_html(
    wallets: List[Dict[str, str]],
    strategies: Dict[str, Dict],
    events: Optional[List[Dict[str, Any]]] = None,
    usage: Optional[List[Dict[str, Any]]] = None,
) -> str:
    w_rows = "".join(
        f"<div class='card'>"
        f"<div class='row'><div class='label'>Agent</div><div class='mono'>{w.get('agent_id')}</div></div>"
        f"<div class='row'><div class='label'>Address</div><div class='mono'>{w.get('address')}</div>"
        f"<button class='btn small' onclick=\"_avCopy('{w.get('address')}', this)\">Copy</button></div>"
        f"<div class='row'><div class='label'>Balance</div><div class='mono'>{w.get('balance_eth','?')} ETH</div></div>"
        f"</div>"
        for w in wallets
    )
    s_rows = "".join(
        f"<div class='card'>"
        f"<div class='row'><div class='label'>Label</div><div class='mono'>{k}</div></div>"
        f"<div class='row'><div class='label'>Agent</div><div class='mono'>{v.get('agent_id')}</div></div>"
        f"<div class='row'><div class='label'>To</div><div class='mono'>{v.get('to_address')}</div>"
        f"<button class='btn small' onclick=\"_avCopy('{v.get('to_address')}', this)\">Copy</button></div>"
        f"<div class='row'><div class='label'>Amount</div><div class='mono'>{v.get('amount_eth')} ETH</div></div>"
        f"<div class='row'><div class='label'>Interval</div><div class='mono'>{v.get('interval_seconds')} s</div></div>"
        f"<div class='row'><div class='label'>Enabled</div><div class='mono'>{v.get('enabled')}</div></div>"
        f"<div class='row'><div class='label'>Next Run</div><div class='mono'>{v.get('next_run_at')}</div></div>"
        f"</div>"
        for k, v in strategies.items()
    )
    e_rows = "".join(
        f"<div class='card'>"
        f"<div class='row'><div class='label'>Tool</div><div class='mono'>{e.get('tool_name')}</div></div>"
        f"<div class='row'><div class='label'>Agent</div><div class='mono'>{e.get('agent_id') or '-'}</div></div>"
        f"<div class='row'><div class='label'>Status</div><span class='badge {'ok' if e.get('status') == 'ok' else 'error'}'>{e.get('status')}</span></div>"
        f"<div class='row'><div class='label'>At</div><div class='mono'>{e.get('occurred_at')}</div></div>"
        f"</div>"
        for e in (events or [])
    )
    usage_rows = "".join(
        f"<div class='card'>"
        f"<div class='row'><div class='label'>Agent</div><div class='mono'>{u.get('agent_id') or '-'}</div></div>"
        f"<div class='row'><div class='label'>Tool</div><div class='mono'>{u.get('tool_name')}</div></div>"
        f"<div class='row'><div class='label'>Count</div><div class='mono'>{u.get('count')}</div></div>"
        f"</div>"
        for u in (usage or [])
    )
    return f"""
<!doctype html>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>AgentVault Dashboard</title>
<style>{_STYLE}</style>
<script>
(function(){{
  const key='av-theme'; const root=document.documentElement;
  const saved=localStorage.getItem(key);
  if(saved){{ root.setAttribute('data-theme', saved); }}
  else if(window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches){{
    root.setAttribute('data-theme','dark');
  }}
  window._avToggleTheme=function(){{ const cur=root.getAttribute('data-theme')==='dark'?'light':'dark'; root.setAttribute('data-theme',cur); localStorage.setItem(key,cur); }};
  window._avCopy=function(txt,el){{ if(navigator.clipboard&&navigator.clipboard.writeText){{ navigator.clipboard.writeText(txt).then(()=>{{ if(el){{ el.innerText='Copied'; setTimeout(()=>el.innerText='Copy',1200); }} }}); }} else {{ const ta=document.createElement('textarea'); ta.value=txt; document.body.appendChild(ta); ta.select(); try{{ document.execCommand('copy'); }} finally{{ document.body.removeChild(ta); }} if(el){{ el.innerText='Copied'; setTimeout(()=>el.innerText='Copy',1200); }} }} }};
}})();
</script>
<div class="wrap">
  <div class="topbar">
    <div class="title">AgentVault Dashboard</div>
    <button class="btn small" onclick="_avToggleTheme()">Toggle Theme</button>
  </div>
  <div class="section">
    <h3>Wallets</h3>
    <div>
      {w_rows}
    </div>
  </div>
  <div class="section">
    <h3>Strategies</h3>
    <div>
      {s_rows}
    </div>
  </div>
  <div class="section">
    <h3>Recent Events</h3>
    <div>
      {e_rows if e_rows else '<div class="small">No events recorded.</div>'}
    </div>
  </div>
  <div class="section">
    <h3>Usage (last 24h)</h3>
    <div>
      {usage_rows if usage_rows else '<div class="small">No activity recorded.</div>'}
    </div>
  </div>
  <div class="small">Generated by AgentVault MCP</div>
</div>
"""


def write_dashboard_page(
    path: str,
    wallets: List[Dict[str, str]],
    strategies: Dict[str, Dict],
    events: Optional[List[Dict[str, Any]]] = None,
) -> str:
    html = dashboard_html(wallets, strategies, events)
    with open(path, "w", encoding="utf-8") as f:
        f.write(html)
    return path
