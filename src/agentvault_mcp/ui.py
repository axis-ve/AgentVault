from __future__ import annotations

import io
from typing import List, Dict, Optional

import segno


_STYLE = """
:root { --bg:#fff; --fg:#111; --muted:#666; --accent:#0a0; }
* { box-sizing: border-box; }
html, body { margin:0; padding:0; background:var(--bg); color:var(--fg);
  font: 16px/1.4 system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, Noto Sans, Helvetica, Arial, sans-serif; }
.wrap { max-width: 880px; margin: 0 auto; padding: 24px; }
.card { border: 3px solid var(--fg); padding: 20px; margin: 16px 0; background:#fff; }
.title { font-weight: 800; font-size: 28px; letter-spacing: .2px; }
.mono { font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace; }
.grid { display: grid; grid-template-columns: 1fr 1fr; gap: 16px; }
.row { display:flex; gap:12px; align-items:center; }
.label { color: var(--muted); min-width: 110px; }
.btn { display:inline-block; border:2px solid var(--fg); padding:10px 12px; text-decoration:none; color:var(--fg); }
.qr { border:2px solid var(--fg); background:#fff; padding:8px; display:inline-block; }
.section { margin-top: 28px; }
.small { font-size: 13px; color: var(--muted); }
"""


def _svg_qr_for_uri(uri: str) -> str:
    qr = segno.make(uri, micro=False)
    buff = io.StringIO()
    qr.save(buff, kind="svg", xmldecl=False)
    return buff.getvalue()


def tipjar_page_html(address: str, amount_eth: Optional[float] = None) -> str:
    uri = eth_uri(address, amount_eth)
    svg = _svg_qr_for_uri(uri)
    amt_txt = f" for {amount_eth} ETH" if amount_eth is not None else ""
    return f"""
<!doctype html>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Tip Jar</title>
<style>{_STYLE}</style>
<div class="wrap">
  <div class="title">Tip Jar</div>
  <div class="card">
    <div class="row"><div class="label">Address</div><div class="mono">{address}</div></div>
    <div class="row"><div class="label">URI</div><div class="mono">{uri}</div></div>
    <div class="section">
      <div class="label">Scan to tip{amt_txt}</div>
      <div class="qr">{svg}</div>
    </div>
  </div>
  <div class="small">Generated by AgentVault MCP</div>
</div>
"""


def write_tipjar_page(path: str, address: str, amount_eth: Optional[float] = None) -> str:
    html = tipjar_page_html(address, amount_eth)
    with open(path, "w", encoding="utf-8") as f:
        f.write(html)
    return path


def eth_uri(address: str, amount_eth: Optional[float] = None) -> str:
    if amount_eth is None:
        return f"ethereum:{address}"
    wei = int(amount_eth * 10**18)
    return f"ethereum:{address}?value={wei}"


def dashboard_html(wallets: List[Dict[str, str]], strategies: Dict[str, Dict]) -> str:
    w_rows = "".join(
        f"<div class='card'><div class='row'><div class='label'>Agent</div><div class='mono'>{w.get('agent_id')}</div></div>"
        f"<div class='row'><div class='label'>Address</div><div class='mono'>{w.get('address')}</div></div>"
        f"<div class='row'><div class='label'>Balance</div><div class='mono'>{w.get('balance_eth','?')} ETH</div></div></div>"
        for w in wallets
    )
    s_rows = "".join(
        f"<div class='card'><div class='row'><div class='label'>Label</div><div class='mono'>{k}</div></div>"
        f"<div class='row'><div class='label'>Agent</div><div class='mono'>{v.get('agent_id')}</div></div>"
        f"<div class='row'><div class='label'>To</div><div class='mono'>{v.get('to_address')}</div></div>"
        f"<div class='row'><div class='label'>Amount</div><div class='mono'>{v.get('amount_eth')} ETH</div></div>"
        f"<div class='row'><div class='label'>Interval</div><div class='mono'>{v.get('interval_seconds')} s</div></div>"
        f"<div class='row'><div class='label'>Enabled</div><div class='mono'>{v.get('enabled')}</div></div>"
        f"<div class='row'><div class='label'>Next Run</div><div class='mono'>{v.get('next_run_at')}</div></div></div>"
        for k, v in strategies.items()
    )
    return f"""
<!doctype html>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>AgentVault Dashboard</title>
<style>{_STYLE}</style>
<div class="wrap">
  <div class="title">AgentVault Dashboard</div>
  <div class="section">
    <h3>Wallets</h3>
    {w_rows}
  </div>
  <div class="section">
    <h3>Strategies</h3>
    {s_rows}
  </div>
  <div class="small">Generated by AgentVault MCP</div>
</div>
"""


def write_dashboard_page(
    path: str, wallets: List[Dict[str, str]], strategies: Dict[str, Dict]
) -> str:
    html = dashboard_html(wallets, strategies)
    with open(path, "w", encoding="utf-8") as f:
        f.write(html)
    return path

