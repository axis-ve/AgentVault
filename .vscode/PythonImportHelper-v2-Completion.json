[
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "HTTPBearer",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "HTTPAuthorizationCredentials",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "HTTPAuthorizationCredentials",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "HTTPBearer",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "field_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jwt",
        "description": "jwt",
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "bcrypt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "bcrypt",
        "description": "bcrypt",
        "detail": "bcrypt",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Web3Adapter",
        "importPath": "src.agentvault_mcp.adapters.web3_adapter",
        "description": "src.agentvault_mcp.adapters.web3_adapter",
        "isExtraImport": true,
        "detail": "src.agentvault_mcp.adapters.web3_adapter",
        "documentation": {}
    },
    {
        "label": "ContextManager",
        "importPath": "src.agentvault_mcp.core",
        "description": "src.agentvault_mcp.core",
        "isExtraImport": true,
        "detail": "src.agentvault_mcp.core",
        "documentation": {}
    },
    {
        "label": "MCPEvent",
        "importPath": "src.agentvault_mcp.db.models",
        "description": "src.agentvault_mcp.db.models",
        "isExtraImport": true,
        "detail": "src.agentvault_mcp.db.models",
        "documentation": {}
    },
    {
        "label": "EventRepository",
        "importPath": "src.agentvault_mcp.db.repositories",
        "description": "src.agentvault_mcp.db.repositories",
        "isExtraImport": true,
        "detail": "src.agentvault_mcp.db.repositories",
        "documentation": {}
    },
    {
        "label": "WalletRepository",
        "importPath": "src.agentvault_mcp.db.repositories",
        "description": "src.agentvault_mcp.db.repositories",
        "isExtraImport": true,
        "detail": "src.agentvault_mcp.db.repositories",
        "documentation": {}
    },
    {
        "label": "StrategyManager",
        "importPath": "src.agentvault_mcp.strategy_manager",
        "description": "src.agentvault_mcp.strategy_manager",
        "isExtraImport": true,
        "detail": "src.agentvault_mcp.strategy_manager",
        "documentation": {}
    },
    {
        "label": "AgentWalletManager",
        "importPath": "src.agentvault_mcp.wallet",
        "description": "src.agentvault_mcp.wallet",
        "isExtraImport": true,
        "detail": "src.agentvault_mcp.wallet",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "ContextManager",
        "importPath": "agentvault_mcp.core",
        "description": "agentvault_mcp.core",
        "isExtraImport": true,
        "detail": "agentvault_mcp.core",
        "documentation": {}
    },
    {
        "label": "ContextManager",
        "importPath": "agentvault_mcp.core",
        "description": "agentvault_mcp.core",
        "isExtraImport": true,
        "detail": "agentvault_mcp.core",
        "documentation": {}
    },
    {
        "label": "ContextManager",
        "importPath": "agentvault_mcp.core",
        "description": "agentvault_mcp.core",
        "isExtraImport": true,
        "detail": "agentvault_mcp.core",
        "documentation": {}
    },
    {
        "label": "ContextManager",
        "importPath": "agentvault_mcp.core",
        "description": "agentvault_mcp.core",
        "isExtraImport": true,
        "detail": "agentvault_mcp.core",
        "documentation": {}
    },
    {
        "label": "ContextManager",
        "importPath": "agentvault_mcp.core",
        "description": "agentvault_mcp.core",
        "isExtraImport": true,
        "detail": "agentvault_mcp.core",
        "documentation": {}
    },
    {
        "label": "ContextManager",
        "importPath": "agentvault_mcp.core",
        "description": "agentvault_mcp.core",
        "isExtraImport": true,
        "detail": "agentvault_mcp.core",
        "documentation": {}
    },
    {
        "label": "Web3Adapter",
        "importPath": "agentvault_mcp.adapters.web3_adapter",
        "description": "agentvault_mcp.adapters.web3_adapter",
        "isExtraImport": true,
        "detail": "agentvault_mcp.adapters.web3_adapter",
        "documentation": {}
    },
    {
        "label": "AgentWalletManager",
        "importPath": "agentvault_mcp.wallet",
        "description": "agentvault_mcp.wallet",
        "isExtraImport": true,
        "detail": "agentvault_mcp.wallet",
        "documentation": {}
    },
    {
        "label": "AgentWalletManager",
        "importPath": "agentvault_mcp.wallet",
        "description": "agentvault_mcp.wallet",
        "isExtraImport": true,
        "detail": "agentvault_mcp.wallet",
        "documentation": {}
    },
    {
        "label": "AgentWalletManager",
        "importPath": "agentvault_mcp.wallet",
        "description": "agentvault_mcp.wallet",
        "isExtraImport": true,
        "detail": "agentvault_mcp.wallet",
        "documentation": {}
    },
    {
        "label": "AgentWalletManager",
        "importPath": "agentvault_mcp.wallet",
        "description": "agentvault_mcp.wallet",
        "isExtraImport": true,
        "detail": "agentvault_mcp.wallet",
        "documentation": {}
    },
    {
        "label": "AgentWalletManager",
        "importPath": "agentvault_mcp.wallet",
        "description": "agentvault_mcp.wallet",
        "isExtraImport": true,
        "detail": "agentvault_mcp.wallet",
        "documentation": {}
    },
    {
        "label": "AgentWalletManager",
        "importPath": "agentvault_mcp.wallet",
        "description": "agentvault_mcp.wallet",
        "isExtraImport": true,
        "detail": "agentvault_mcp.wallet",
        "documentation": {}
    },
    {
        "label": "httpx",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "httpx",
        "description": "httpx",
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "AsyncOpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "AsyncWeb3",
        "importPath": "web3",
        "description": "web3",
        "isExtraImport": true,
        "detail": "web3",
        "documentation": {}
    },
    {
        "label": "Web3",
        "importPath": "web3",
        "description": "web3",
        "isExtraImport": true,
        "detail": "web3",
        "documentation": {}
    },
    {
        "label": "Web3",
        "importPath": "web3",
        "description": "web3",
        "isExtraImport": true,
        "detail": "web3",
        "documentation": {}
    },
    {
        "label": "Web3Exception",
        "importPath": "web3.exceptions",
        "description": "web3.exceptions",
        "isExtraImport": true,
        "detail": "web3.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidTransaction",
        "importPath": "web3.exceptions",
        "description": "web3.exceptions",
        "isExtraImport": true,
        "detail": "web3.exceptions",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "command",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "JSON",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Date",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "LargeBinary",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "UniqueConstraint",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "update",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "Connection",
        "importPath": "sqlalchemy.engine",
        "description": "sqlalchemy.engine",
        "isExtraImport": true,
        "detail": "sqlalchemy.engine",
        "documentation": {}
    },
    {
        "label": "Engine",
        "importPath": "sqlalchemy.engine",
        "description": "sqlalchemy.engine",
        "isExtraImport": true,
        "detail": "sqlalchemy.engine",
        "documentation": {}
    },
    {
        "label": "get_sync_engine",
        "importPath": "agentvault_mcp.db.engine",
        "description": "agentvault_mcp.db.engine",
        "isExtraImport": true,
        "detail": "agentvault_mcp.db.engine",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "agentvault_mcp.db",
        "description": "agentvault_mcp.db",
        "isExtraImport": true,
        "detail": "agentvault_mcp.db",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "alembic.config",
        "description": "alembic.config",
        "isExtraImport": true,
        "detail": "alembic.config",
        "documentation": {}
    },
    {
        "label": "lru_cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "lru_cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "AsyncEngine",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "async_sessionmaker",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "create_async_engine",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "DeclarativeBase",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "uvicorn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uvicorn",
        "description": "uvicorn",
        "detail": "uvicorn",
        "documentation": {}
    },
    {
        "label": "Fernet",
        "importPath": "cryptography.fernet",
        "description": "cryptography.fernet",
        "isExtraImport": true,
        "detail": "cryptography.fernet",
        "documentation": {}
    },
    {
        "label": "InvalidToken",
        "importPath": "cryptography.fernet",
        "description": "cryptography.fernet",
        "isExtraImport": true,
        "detail": "cryptography.fernet",
        "documentation": {}
    },
    {
        "label": "Fernet",
        "importPath": "cryptography.fernet",
        "description": "cryptography.fernet",
        "isExtraImport": true,
        "detail": "cryptography.fernet",
        "documentation": {}
    },
    {
        "label": "InvalidToken",
        "importPath": "cryptography.fernet",
        "description": "cryptography.fernet",
        "isExtraImport": true,
        "detail": "cryptography.fernet",
        "documentation": {}
    },
    {
        "label": "Fernet",
        "importPath": "cryptography.fernet",
        "description": "cryptography.fernet",
        "isExtraImport": true,
        "detail": "cryptography.fernet",
        "documentation": {}
    },
    {
        "label": "Fernet",
        "importPath": "cryptography.fernet",
        "description": "cryptography.fernet",
        "isExtraImport": true,
        "detail": "cryptography.fernet",
        "documentation": {}
    },
    {
        "label": "Fernet",
        "importPath": "cryptography.fernet",
        "description": "cryptography.fernet",
        "isExtraImport": true,
        "detail": "cryptography.fernet",
        "documentation": {}
    },
    {
        "label": "Fernet",
        "importPath": "cryptography.fernet",
        "description": "cryptography.fernet",
        "isExtraImport": true,
        "detail": "cryptography.fernet",
        "documentation": {}
    },
    {
        "label": "Fernet",
        "importPath": "cryptography.fernet",
        "description": "cryptography.fernet",
        "isExtraImport": true,
        "detail": "cryptography.fernet",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "structlog",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "structlog",
        "description": "structlog",
        "detail": "structlog",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "Account",
        "importPath": "eth_account",
        "description": "eth_account",
        "isExtraImport": true,
        "detail": "eth_account",
        "documentation": {}
    },
    {
        "label": "Account",
        "importPath": "eth_account",
        "description": "eth_account",
        "isExtraImport": true,
        "detail": "eth_account",
        "documentation": {}
    },
    {
        "label": "fetch_deployment",
        "importPath": "eth_defi.uniswap_v3.deployment",
        "description": "eth_defi.uniswap_v3.deployment",
        "isExtraImport": true,
        "detail": "eth_defi.uniswap_v3.deployment",
        "documentation": {}
    },
    {
        "label": "swap_with_slippage_protection",
        "importPath": "eth_defi.uniswap_v3.swap",
        "description": "eth_defi.uniswap_v3.swap",
        "isExtraImport": true,
        "detail": "eth_defi.uniswap_v3.swap",
        "documentation": {}
    },
    {
        "label": "get_onchain_price",
        "importPath": "eth_defi.uniswap_v3.price",
        "description": "eth_defi.uniswap_v3.price",
        "isExtraImport": true,
        "detail": "eth_defi.uniswap_v3.price",
        "documentation": {}
    },
    {
        "label": "supply",
        "importPath": "eth_defi.aave_v3.loan",
        "description": "eth_defi.aave_v3.loan",
        "isExtraImport": true,
        "detail": "eth_defi.aave_v3.loan",
        "documentation": {}
    },
    {
        "label": "aave_v3_get_deposit_balance",
        "importPath": "eth_defi.aave_v3.balances",
        "description": "eth_defi.aave_v3.balances",
        "isExtraImport": true,
        "detail": "eth_defi.aave_v3.balances",
        "documentation": {}
    },
    {
        "label": "encode",
        "importPath": "eth_abi",
        "description": "eth_abi",
        "isExtraImport": true,
        "detail": "eth_abi",
        "documentation": {}
    },
    {
        "label": "to_checksum_address",
        "importPath": "eth_utils",
        "description": "eth_utils",
        "isExtraImport": true,
        "detail": "eth_utils",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "asdict",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "yaml",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "yaml",
        "description": "yaml",
        "detail": "yaml",
        "documentation": {}
    },
    {
        "label": "segno",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "segno",
        "description": "segno",
        "detail": "segno",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "generate_mnemonic",
        "importPath": "eth_account.hdaccount",
        "description": "eth_account.hdaccount",
        "isExtraImport": true,
        "detail": "eth_account.hdaccount",
        "documentation": {}
    },
    {
        "label": "encode_defunct",
        "importPath": "eth_account.messages",
        "description": "eth_account.messages",
        "isExtraImport": true,
        "detail": "eth_account.messages",
        "documentation": {}
    },
    {
        "label": "encode_typed_data",
        "importPath": "eth_account.messages",
        "description": "eth_account.messages",
        "isExtraImport": true,
        "detail": "eth_account.messages",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "check_text",
        "importPath": "agentvault_mcp.guardrail",
        "description": "agentvault_mcp.guardrail",
        "isExtraImport": true,
        "detail": "agentvault_mcp.guardrail",
        "documentation": {}
    },
    {
        "label": "PolicyConfig",
        "importPath": "agentvault_mcp.policy",
        "description": "agentvault_mcp.policy",
        "isExtraImport": true,
        "detail": "agentvault_mcp.policy",
        "documentation": {}
    },
    {
        "label": "PolicyEngine",
        "importPath": "agentvault_mcp.policy",
        "description": "agentvault_mcp.policy",
        "isExtraImport": true,
        "detail": "agentvault_mcp.policy",
        "documentation": {}
    },
    {
        "label": "RateLimitRule",
        "importPath": "agentvault_mcp.policy",
        "description": "agentvault_mcp.policy",
        "isExtraImport": true,
        "detail": "agentvault_mcp.policy",
        "documentation": {}
    },
    {
        "label": "run_with_policy",
        "importPath": "agentvault_mcp.policy",
        "description": "agentvault_mcp.policy",
        "isExtraImport": true,
        "detail": "agentvault_mcp.policy",
        "documentation": {}
    },
    {
        "label": "EventRepository",
        "importPath": "agentvault_mcp.db.repositories",
        "description": "agentvault_mcp.db.repositories",
        "isExtraImport": true,
        "detail": "agentvault_mcp.db.repositories",
        "documentation": {}
    },
    {
        "label": "send_when_gas_below",
        "importPath": "agentvault_mcp.strategies",
        "description": "agentvault_mcp.strategies",
        "isExtraImport": true,
        "detail": "agentvault_mcp.strategies",
        "documentation": {}
    },
    {
        "label": "dca_once",
        "importPath": "agentvault_mcp.strategies",
        "description": "agentvault_mcp.strategies",
        "isExtraImport": true,
        "detail": "agentvault_mcp.strategies",
        "documentation": {}
    },
    {
        "label": "scheduled_send_once",
        "importPath": "agentvault_mcp.strategies",
        "description": "agentvault_mcp.strategies",
        "isExtraImport": true,
        "detail": "agentvault_mcp.strategies",
        "documentation": {}
    },
    {
        "label": "micro_tip_equal",
        "importPath": "agentvault_mcp.strategies",
        "description": "agentvault_mcp.strategies",
        "isExtraImport": true,
        "detail": "agentvault_mcp.strategies",
        "documentation": {}
    },
    {
        "label": "micro_tip_amounts",
        "importPath": "agentvault_mcp.strategies",
        "description": "agentvault_mcp.strategies",
        "isExtraImport": true,
        "detail": "agentvault_mcp.strategies",
        "documentation": {}
    },
    {
        "label": "StrategyManager",
        "importPath": "agentvault_mcp.strategy_manager",
        "description": "agentvault_mcp.strategy_manager",
        "isExtraImport": true,
        "detail": "agentvault_mcp.strategy_manager",
        "documentation": {}
    },
    {
        "label": "tipjar_page_html",
        "importPath": "agentvault_mcp.ui",
        "description": "agentvault_mcp.ui",
        "isExtraImport": true,
        "detail": "agentvault_mcp.ui",
        "documentation": {}
    },
    {
        "label": "eth_uri",
        "importPath": "agentvault_mcp.ui",
        "description": "agentvault_mcp.ui",
        "isExtraImport": true,
        "detail": "agentvault_mcp.ui",
        "documentation": {}
    },
    {
        "label": "dashboard_html",
        "importPath": "agentvault_mcp.ui",
        "description": "agentvault_mcp.ui",
        "isExtraImport": true,
        "detail": "agentvault_mcp.ui",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "dashboard.backend.main",
        "description": "dashboard.backend.main",
        "peekOfCode": "class User(BaseModel):\n    id: str\n    email: str\n    wallet_address: Optional[str] = None\n    token_balance: float = 0\n    total_usage: int = 0\n    is_active: bool = True\n    created_at: datetime\n    last_login: Optional[datetime] = None\nclass Agent(BaseModel):",
        "detail": "dashboard.backend.main",
        "documentation": {}
    },
    {
        "label": "Agent",
        "kind": 6,
        "importPath": "dashboard.backend.main",
        "description": "dashboard.backend.main",
        "peekOfCode": "class Agent(BaseModel):\n    id: str\n    name: str\n    description: str\n    wallet_address: str\n    status: str\n    created_at: datetime\n    last_active: Optional[datetime] = None\nclass UsageStats(BaseModel):\n    total_requests: int",
        "detail": "dashboard.backend.main",
        "documentation": {}
    },
    {
        "label": "UsageStats",
        "kind": 6,
        "importPath": "dashboard.backend.main",
        "description": "dashboard.backend.main",
        "peekOfCode": "class UsageStats(BaseModel):\n    total_requests: int\n    total_cost: float\n    daily_usage: List[Dict[str, Any]]\n    monthly_usage: List[Dict[str, Any]]\nclass BillingHistory(BaseModel):\n    id: str\n    amount: float\n    description: str\n    timestamp: datetime",
        "detail": "dashboard.backend.main",
        "documentation": {}
    },
    {
        "label": "BillingHistory",
        "kind": 6,
        "importPath": "dashboard.backend.main",
        "description": "dashboard.backend.main",
        "peekOfCode": "class BillingHistory(BaseModel):\n    id: str\n    amount: float\n    description: str\n    timestamp: datetime\n    status: str\nclass AirdropInfo(BaseModel):\n    eligible: bool\n    amount: float\n    next_claim: Optional[datetime]",
        "detail": "dashboard.backend.main",
        "documentation": {}
    },
    {
        "label": "AirdropInfo",
        "kind": 6,
        "importPath": "dashboard.backend.main",
        "description": "dashboard.backend.main",
        "peekOfCode": "class AirdropInfo(BaseModel):\n    eligible: bool\n    amount: float\n    next_claim: Optional[datetime]\n    total_claimed: float\n# Mock data storage (in production, use a database)\nusers_db = {}\nagents_db = {}\nusage_db = {}\nbilling_db = {}",
        "detail": "dashboard.backend.main",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "kind": 2,
        "importPath": "dashboard.backend.main",
        "description": "dashboard.backend.main",
        "peekOfCode": "def create_access_token(data: dict):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(days=7)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\ndef verify_token(credentials: HTTPAuthorizationCredentials = Depends(security)):\n    try:\n        payload = jwt.decode(credentials.credentials, SECRET_KEY, algorithms=[ALGORITHM])\n        return payload",
        "detail": "dashboard.backend.main",
        "documentation": {}
    },
    {
        "label": "verify_token",
        "kind": 2,
        "importPath": "dashboard.backend.main",
        "description": "dashboard.backend.main",
        "peekOfCode": "def verify_token(credentials: HTTPAuthorizationCredentials = Depends(security)):\n    try:\n        payload = jwt.decode(credentials.credentials, SECRET_KEY, algorithms=[ALGORITHM])\n        return payload\n    except jwt.PyJWTError:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\"\n        )\n# API Endpoints",
        "detail": "dashboard.backend.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "dashboard.backend.main",
        "description": "dashboard.backend.main",
        "peekOfCode": "app = FastAPI(\n    title=\"AgentVault Dashboard API\",\n    description=\"Backend API for AgentVault crypto platform\",\n    version=\"1.0.0\"\n)\n# CORS middleware\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"http://localhost:3000\", \"http://localhost:3001\"],\n    allow_credentials=True,",
        "detail": "dashboard.backend.main",
        "documentation": {}
    },
    {
        "label": "security",
        "kind": 5,
        "importPath": "dashboard.backend.main",
        "description": "dashboard.backend.main",
        "peekOfCode": "security = HTTPBearer()\nSECRET_KEY = os.getenv(\"JWT_SECRET_KEY\", \"your-secret-key\")\nALGORITHM = \"HS256\"\n# Models\nclass User(BaseModel):\n    id: str\n    email: str\n    wallet_address: Optional[str] = None\n    token_balance: float = 0\n    total_usage: int = 0",
        "detail": "dashboard.backend.main",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "dashboard.backend.main",
        "description": "dashboard.backend.main",
        "peekOfCode": "SECRET_KEY = os.getenv(\"JWT_SECRET_KEY\", \"your-secret-key\")\nALGORITHM = \"HS256\"\n# Models\nclass User(BaseModel):\n    id: str\n    email: str\n    wallet_address: Optional[str] = None\n    token_balance: float = 0\n    total_usage: int = 0\n    is_active: bool = True",
        "detail": "dashboard.backend.main",
        "documentation": {}
    },
    {
        "label": "ALGORITHM",
        "kind": 5,
        "importPath": "dashboard.backend.main",
        "description": "dashboard.backend.main",
        "peekOfCode": "ALGORITHM = \"HS256\"\n# Models\nclass User(BaseModel):\n    id: str\n    email: str\n    wallet_address: Optional[str] = None\n    token_balance: float = 0\n    total_usage: int = 0\n    is_active: bool = True\n    created_at: datetime",
        "detail": "dashboard.backend.main",
        "documentation": {}
    },
    {
        "label": "users_db",
        "kind": 5,
        "importPath": "dashboard.backend.main",
        "description": "dashboard.backend.main",
        "peekOfCode": "users_db = {}\nagents_db = {}\nusage_db = {}\nbilling_db = {}\n# Authentication\ndef create_access_token(data: dict):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(days=7)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)",
        "detail": "dashboard.backend.main",
        "documentation": {}
    },
    {
        "label": "agents_db",
        "kind": 5,
        "importPath": "dashboard.backend.main",
        "description": "dashboard.backend.main",
        "peekOfCode": "agents_db = {}\nusage_db = {}\nbilling_db = {}\n# Authentication\ndef create_access_token(data: dict):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(days=7)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt",
        "detail": "dashboard.backend.main",
        "documentation": {}
    },
    {
        "label": "usage_db",
        "kind": 5,
        "importPath": "dashboard.backend.main",
        "description": "dashboard.backend.main",
        "peekOfCode": "usage_db = {}\nbilling_db = {}\n# Authentication\ndef create_access_token(data: dict):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(days=7)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\ndef verify_token(credentials: HTTPAuthorizationCredentials = Depends(security)):",
        "detail": "dashboard.backend.main",
        "documentation": {}
    },
    {
        "label": "billing_db",
        "kind": 5,
        "importPath": "dashboard.backend.main",
        "description": "dashboard.backend.main",
        "peekOfCode": "billing_db = {}\n# Authentication\ndef create_access_token(data: dict):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(days=7)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\ndef verify_token(credentials: HTTPAuthorizationCredentials = Depends(security)):\n    try:",
        "detail": "dashboard.backend.main",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "dashboard.backend.main_integrated",
        "description": "dashboard.backend.main_integrated",
        "peekOfCode": "class User(BaseModel):\n    id: str\n    email: str\n    wallet_address: Optional[str] = None\n    token_balance: float = 0\n    total_usage: int = 0\n    is_active: bool = True\n    created_at: datetime\n    last_login: Optional[datetime] = None\nclass AgentCreate(BaseModel):",
        "detail": "dashboard.backend.main_integrated",
        "documentation": {}
    },
    {
        "label": "AgentCreate",
        "kind": 6,
        "importPath": "dashboard.backend.main_integrated",
        "description": "dashboard.backend.main_integrated",
        "peekOfCode": "class AgentCreate(BaseModel):\n    name: str\n    description: str\nclass Agent(BaseModel):\n    id: str\n    name: str\n    description: str\n    wallet_address: str\n    balance_eth: float\n    status: str",
        "detail": "dashboard.backend.main_integrated",
        "documentation": {}
    },
    {
        "label": "Agent",
        "kind": 6,
        "importPath": "dashboard.backend.main_integrated",
        "description": "dashboard.backend.main_integrated",
        "peekOfCode": "class Agent(BaseModel):\n    id: str\n    name: str\n    description: str\n    wallet_address: str\n    balance_eth: float\n    status: str\n    created_at: datetime\n    last_active: Optional[datetime] = None\nclass TransferRequest(BaseModel):",
        "detail": "dashboard.backend.main_integrated",
        "documentation": {}
    },
    {
        "label": "TransferRequest",
        "kind": 6,
        "importPath": "dashboard.backend.main_integrated",
        "description": "dashboard.backend.main_integrated",
        "peekOfCode": "class TransferRequest(BaseModel):\n    agent_id: str\n    to_address: str\n    amount_eth: float\n    confirmation_code: Optional[str] = None\nclass StrategyCreate(BaseModel):\n    label: str\n    agent_id: str\n    to_address: str\n    amount_eth: float",
        "detail": "dashboard.backend.main_integrated",
        "documentation": {}
    },
    {
        "label": "StrategyCreate",
        "kind": 6,
        "importPath": "dashboard.backend.main_integrated",
        "description": "dashboard.backend.main_integrated",
        "peekOfCode": "class StrategyCreate(BaseModel):\n    label: str\n    agent_id: str\n    to_address: str\n    amount_eth: float\n    interval_seconds: int\n    max_base_fee_gwei: Optional[float] = None\n    daily_cap_eth: Optional[float] = None\n# Mock user database (replace with real persistence when auth added)\nMOCK_USERS = {",
        "detail": "dashboard.backend.main_integrated",
        "documentation": {}
    },
    {
        "label": "get_wallet_manager",
        "kind": 2,
        "importPath": "dashboard.backend.main_integrated",
        "description": "dashboard.backend.main_integrated",
        "peekOfCode": "def get_wallet_manager() -> AgentWalletManager:\n    global _wallet_manager\n    if _wallet_manager is None:\n        ctx = ContextManager()\n        rpc_url = os.getenv(\"WEB3_RPC_URL\", \"https://ethereum-sepolia.publicnode.com\")\n        web3_adapter = Web3Adapter(rpc_url)\n        encrypt_key = os.getenv(\"ENCRYPT_KEY\")\n        if not encrypt_key:\n            raise RuntimeError(\"ENCRYPT_KEY not set in environment\")\n        database_url = os.getenv(\"VAULTPILOT_DATABASE_URL\", \"sqlite+aiosqlite:///./agentvault.db\")",
        "detail": "dashboard.backend.main_integrated",
        "documentation": {}
    },
    {
        "label": "get_strategy_manager",
        "kind": 2,
        "importPath": "dashboard.backend.main_integrated",
        "description": "dashboard.backend.main_integrated",
        "peekOfCode": "def get_strategy_manager() -> StrategyManager:\n    global _strategy_manager\n    if _strategy_manager is None:\n        _strategy_manager = StrategyManager(get_wallet_manager())\n    return _strategy_manager\nasync def _load_events(limit: int = MAX_EVENTS_FETCH) -> List[MCPEvent]:\n    wallet_mgr = get_wallet_manager()\n    async with wallet_mgr.session_maker() as session:\n        repo = EventRepository(session, wallet_mgr.tenant_id)\n        return await repo.list_events(limit)",
        "detail": "dashboard.backend.main_integrated",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "kind": 2,
        "importPath": "dashboard.backend.main_integrated",
        "description": "dashboard.backend.main_integrated",
        "peekOfCode": "def create_access_token(data: dict) -> str:\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(days=7)\n    to_encode.update({\"exp\": expire})\n    return jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\nasync def verify_token(credentials: Optional[HTTPAuthorizationCredentials] = Depends(security)) -> dict:\n    if credentials is None:\n        if ALLOW_ANON:\n            return _default_user()\n        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail=\"Authentication required\")",
        "detail": "dashboard.backend.main_integrated",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "dashboard.backend.main_integrated",
        "description": "dashboard.backend.main_integrated",
        "peekOfCode": "app = FastAPI(\n    title=\"AgentVault Dashboard API\",\n    description=\"Backend API for AgentVault - Integrated with MCP Server\",\n    version=\"1.0.0\",\n)\n# CORS middleware\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=os.getenv(\"AGENTVAULT_DASHBOARD_ORIGINS\", \"http://localhost:3000\").split(\",\"),\n    allow_credentials=True,",
        "detail": "dashboard.backend.main_integrated",
        "documentation": {}
    },
    {
        "label": "security",
        "kind": 5,
        "importPath": "dashboard.backend.main_integrated",
        "description": "dashboard.backend.main_integrated",
        "peekOfCode": "security = HTTPBearer(auto_error=False)\nSECRET_KEY = os.getenv(\"JWT_SECRET_KEY\", \"dev-secret-key\")\nALGORITHM = \"HS256\"\nALLOW_ANON = os.getenv(\"AGENTVAULT_DASHBOARD_ALLOW_ANON\", \"1\") == \"1\"\n# Usage & billing constants\nCOST_PER_EVENT = float(os.getenv(\"AGENTVAULT_COST_PER_EVENT\", \"0.01\"))\nAIR_DROP_RATE = float(os.getenv(\"AGENTVAULT_AIRDROP_RATE\", \"0.05\"))\nMAX_EVENTS_FETCH = int(os.getenv(\"AGENTVAULT_MAX_EVENTS_FETCH\", \"1000\"))\n# Airdrop in-memory state (dev only)\nCLAIM_STATE: Dict[str, Dict[str, Any]] = {}",
        "detail": "dashboard.backend.main_integrated",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "dashboard.backend.main_integrated",
        "description": "dashboard.backend.main_integrated",
        "peekOfCode": "SECRET_KEY = os.getenv(\"JWT_SECRET_KEY\", \"dev-secret-key\")\nALGORITHM = \"HS256\"\nALLOW_ANON = os.getenv(\"AGENTVAULT_DASHBOARD_ALLOW_ANON\", \"1\") == \"1\"\n# Usage & billing constants\nCOST_PER_EVENT = float(os.getenv(\"AGENTVAULT_COST_PER_EVENT\", \"0.01\"))\nAIR_DROP_RATE = float(os.getenv(\"AGENTVAULT_AIRDROP_RATE\", \"0.05\"))\nMAX_EVENTS_FETCH = int(os.getenv(\"AGENTVAULT_MAX_EVENTS_FETCH\", \"1000\"))\n# Airdrop in-memory state (dev only)\nCLAIM_STATE: Dict[str, Dict[str, Any]] = {}\nCLAIM_LOCK = asyncio.Lock()",
        "detail": "dashboard.backend.main_integrated",
        "documentation": {}
    },
    {
        "label": "ALGORITHM",
        "kind": 5,
        "importPath": "dashboard.backend.main_integrated",
        "description": "dashboard.backend.main_integrated",
        "peekOfCode": "ALGORITHM = \"HS256\"\nALLOW_ANON = os.getenv(\"AGENTVAULT_DASHBOARD_ALLOW_ANON\", \"1\") == \"1\"\n# Usage & billing constants\nCOST_PER_EVENT = float(os.getenv(\"AGENTVAULT_COST_PER_EVENT\", \"0.01\"))\nAIR_DROP_RATE = float(os.getenv(\"AGENTVAULT_AIRDROP_RATE\", \"0.05\"))\nMAX_EVENTS_FETCH = int(os.getenv(\"AGENTVAULT_MAX_EVENTS_FETCH\", \"1000\"))\n# Airdrop in-memory state (dev only)\nCLAIM_STATE: Dict[str, Dict[str, Any]] = {}\nCLAIM_LOCK = asyncio.Lock()\n_wallet_manager: Optional[AgentWalletManager] = None",
        "detail": "dashboard.backend.main_integrated",
        "documentation": {}
    },
    {
        "label": "ALLOW_ANON",
        "kind": 5,
        "importPath": "dashboard.backend.main_integrated",
        "description": "dashboard.backend.main_integrated",
        "peekOfCode": "ALLOW_ANON = os.getenv(\"AGENTVAULT_DASHBOARD_ALLOW_ANON\", \"1\") == \"1\"\n# Usage & billing constants\nCOST_PER_EVENT = float(os.getenv(\"AGENTVAULT_COST_PER_EVENT\", \"0.01\"))\nAIR_DROP_RATE = float(os.getenv(\"AGENTVAULT_AIRDROP_RATE\", \"0.05\"))\nMAX_EVENTS_FETCH = int(os.getenv(\"AGENTVAULT_MAX_EVENTS_FETCH\", \"1000\"))\n# Airdrop in-memory state (dev only)\nCLAIM_STATE: Dict[str, Dict[str, Any]] = {}\nCLAIM_LOCK = asyncio.Lock()\n_wallet_manager: Optional[AgentWalletManager] = None\n_strategy_manager: Optional[StrategyManager] = None",
        "detail": "dashboard.backend.main_integrated",
        "documentation": {}
    },
    {
        "label": "COST_PER_EVENT",
        "kind": 5,
        "importPath": "dashboard.backend.main_integrated",
        "description": "dashboard.backend.main_integrated",
        "peekOfCode": "COST_PER_EVENT = float(os.getenv(\"AGENTVAULT_COST_PER_EVENT\", \"0.01\"))\nAIR_DROP_RATE = float(os.getenv(\"AGENTVAULT_AIRDROP_RATE\", \"0.05\"))\nMAX_EVENTS_FETCH = int(os.getenv(\"AGENTVAULT_MAX_EVENTS_FETCH\", \"1000\"))\n# Airdrop in-memory state (dev only)\nCLAIM_STATE: Dict[str, Dict[str, Any]] = {}\nCLAIM_LOCK = asyncio.Lock()\n_wallet_manager: Optional[AgentWalletManager] = None\n_strategy_manager: Optional[StrategyManager] = None\nclass User(BaseModel):\n    id: str",
        "detail": "dashboard.backend.main_integrated",
        "documentation": {}
    },
    {
        "label": "AIR_DROP_RATE",
        "kind": 5,
        "importPath": "dashboard.backend.main_integrated",
        "description": "dashboard.backend.main_integrated",
        "peekOfCode": "AIR_DROP_RATE = float(os.getenv(\"AGENTVAULT_AIRDROP_RATE\", \"0.05\"))\nMAX_EVENTS_FETCH = int(os.getenv(\"AGENTVAULT_MAX_EVENTS_FETCH\", \"1000\"))\n# Airdrop in-memory state (dev only)\nCLAIM_STATE: Dict[str, Dict[str, Any]] = {}\nCLAIM_LOCK = asyncio.Lock()\n_wallet_manager: Optional[AgentWalletManager] = None\n_strategy_manager: Optional[StrategyManager] = None\nclass User(BaseModel):\n    id: str\n    email: str",
        "detail": "dashboard.backend.main_integrated",
        "documentation": {}
    },
    {
        "label": "MAX_EVENTS_FETCH",
        "kind": 5,
        "importPath": "dashboard.backend.main_integrated",
        "description": "dashboard.backend.main_integrated",
        "peekOfCode": "MAX_EVENTS_FETCH = int(os.getenv(\"AGENTVAULT_MAX_EVENTS_FETCH\", \"1000\"))\n# Airdrop in-memory state (dev only)\nCLAIM_STATE: Dict[str, Dict[str, Any]] = {}\nCLAIM_LOCK = asyncio.Lock()\n_wallet_manager: Optional[AgentWalletManager] = None\n_strategy_manager: Optional[StrategyManager] = None\nclass User(BaseModel):\n    id: str\n    email: str\n    wallet_address: Optional[str] = None",
        "detail": "dashboard.backend.main_integrated",
        "documentation": {}
    },
    {
        "label": "CLAIM_LOCK",
        "kind": 5,
        "importPath": "dashboard.backend.main_integrated",
        "description": "dashboard.backend.main_integrated",
        "peekOfCode": "CLAIM_LOCK = asyncio.Lock()\n_wallet_manager: Optional[AgentWalletManager] = None\n_strategy_manager: Optional[StrategyManager] = None\nclass User(BaseModel):\n    id: str\n    email: str\n    wallet_address: Optional[str] = None\n    token_balance: float = 0\n    total_usage: int = 0\n    is_active: bool = True",
        "detail": "dashboard.backend.main_integrated",
        "documentation": {}
    },
    {
        "label": "MOCK_USERS",
        "kind": 5,
        "importPath": "dashboard.backend.main_integrated",
        "description": "dashboard.backend.main_integrated",
        "peekOfCode": "MOCK_USERS = {\n    \"demo@agentvault.com\": {\n        \"id\": \"user-demo\",\n        \"email\": \"demo@agentvault.com\",\n        \"password\": \"demo123\",  # In production: store hashed password\n    }\n}\n# ---------------------------------------------------------------------------\n# Initialization helpers\n# ---------------------------------------------------------------------------",
        "detail": "dashboard.backend.main_integrated",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "dashboard.node_modules.flatted.python.flatted",
        "description": "dashboard.node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "dashboard.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "dashboard.node_modules.flatted.python.flatted",
        "description": "dashboard.node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "dashboard.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "dashboard.node_modules.flatted.python.flatted",
        "description": "dashboard.node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "dashboard.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "dashboard.node_modules.flatted.python.flatted",
        "description": "dashboard.node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "dashboard.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "OllamaAdapter",
        "kind": 6,
        "importPath": "src.agentvault_mcp.adapters.ollama_adapter",
        "description": "src.agentvault_mcp.adapters.ollama_adapter",
        "peekOfCode": "class OllamaAdapter:\n    \"\"\"Minimal async adapter for a local Ollama server.\n    Uses the /api/chat endpoint. Configure with OLLAMA_HOST and OLLAMA_MODEL.\n    \"\"\"\n    def __init__(self, host: Optional[str] = None, model: Optional[str] = None):\n        self.host = (host or os.getenv(\"OLLAMA_HOST\") or \"http://127.0.0.1:11434\").rstrip(\"/\")\n        self.model = model or os.getenv(\"OLLAMA_MODEL\", \"llama3.1:8b\")\n    async def call(self, context: ContextSchema) -> str:\n        msgs = []\n        if context.system_prompt:",
        "detail": "src.agentvault_mcp.adapters.ollama_adapter",
        "documentation": {}
    },
    {
        "label": "OpenAIAdapter",
        "kind": 6,
        "importPath": "src.agentvault_mcp.adapters.openai_adapter",
        "description": "src.agentvault_mcp.adapters.openai_adapter",
        "peekOfCode": "class OpenAIAdapter:\n    \"\"\"Adapter for OpenAI LLM calls (async).\"\"\"\n    def __init__(self, api_key: str, model: Optional[str] = None):\n        self.client = AsyncOpenAI(api_key=api_key)\n        self.model = model or os.getenv(\"OPENAI_MODEL\", \"gpt-4o-mini\")\n    async def call(self, context: ContextSchema) -> str:\n        messages = [{\"role\": \"system\", \"content\": context.system_prompt}] + context.history\n        response = await self.client.chat.completions.create(\n            model=self.model,\n            messages=messages,",
        "detail": "src.agentvault_mcp.adapters.openai_adapter",
        "documentation": {}
    },
    {
        "label": "Web3Adapter",
        "kind": 6,
        "importPath": "src.agentvault_mcp.adapters.web3_adapter",
        "description": "src.agentvault_mcp.adapters.web3_adapter",
        "peekOfCode": "class Web3Adapter:\n    \"\"\"Adapter for Ethereum interactions with basic retry and RPC rotation.\"\"\"\n    def __init__(self, rpc_url: str):\n        # Gather URLs from explicit arg, optional Alchemy URLs, and fallbacks\n        urls_env = [u.strip() for u in os.getenv(\"WEB3_RPC_URLS\", \"\").split(\",\") if u.strip()]\n        alchemy_http = os.getenv(\"ALCHEMY_HTTP_URL\")\n        alchemy_ws = os.getenv(\"ALCHEMY_WS_URL\")\n        urls: list[str] = []\n        if rpc_url:\n            urls.append(rpc_url)",
        "detail": "src.agentvault_mcp.adapters.web3_adapter",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "src.agentvault_mcp.db.migrations.versions.0001_initial",
        "description": "src.agentvault_mcp.db.migrations.versions.0001_initial",
        "peekOfCode": "def upgrade() -> None:\n    op.create_table(\n        \"wallets\",\n        sa.Column(\"id\", sa.String(length=36), primary_key=True),\n        sa.Column(\"agent_id\", sa.String(length=255), nullable=False, unique=True),\n        sa.Column(\"address\", sa.String(length=42), nullable=False),\n        sa.Column(\"encrypted_privkey\", sa.LargeBinary(), nullable=False),\n        sa.Column(\"chain_id\", sa.Integer(), nullable=False),\n        sa.Column(\"last_nonce\", sa.Integer()),\n        sa.Column(\"metadata_json\", sa.JSON(), nullable=True),",
        "detail": "src.agentvault_mcp.db.migrations.versions.0001_initial",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "src.agentvault_mcp.db.migrations.versions.0001_initial",
        "description": "src.agentvault_mcp.db.migrations.versions.0001_initial",
        "peekOfCode": "def downgrade() -> None:\n    op.drop_table(\"mcp_events\")\n    op.drop_table(\"strategy_runs\")\n    op.drop_table(\"strategies\")\n    op.drop_table(\"wallets\")",
        "detail": "src.agentvault_mcp.db.migrations.versions.0001_initial",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "src.agentvault_mcp.db.migrations.versions.0001_initial",
        "description": "src.agentvault_mcp.db.migrations.versions.0001_initial",
        "peekOfCode": "revision = \"0001_initial\"\ndown_revision = None\nbranch_labels = None\ndepends_on = None\ndef upgrade() -> None:\n    op.create_table(\n        \"wallets\",\n        sa.Column(\"id\", sa.String(length=36), primary_key=True),\n        sa.Column(\"agent_id\", sa.String(length=255), nullable=False, unique=True),\n        sa.Column(\"address\", sa.String(length=42), nullable=False),",
        "detail": "src.agentvault_mcp.db.migrations.versions.0001_initial",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "src.agentvault_mcp.db.migrations.versions.0001_initial",
        "description": "src.agentvault_mcp.db.migrations.versions.0001_initial",
        "peekOfCode": "down_revision = None\nbranch_labels = None\ndepends_on = None\ndef upgrade() -> None:\n    op.create_table(\n        \"wallets\",\n        sa.Column(\"id\", sa.String(length=36), primary_key=True),\n        sa.Column(\"agent_id\", sa.String(length=255), nullable=False, unique=True),\n        sa.Column(\"address\", sa.String(length=42), nullable=False),\n        sa.Column(\"encrypted_privkey\", sa.LargeBinary(), nullable=False),",
        "detail": "src.agentvault_mcp.db.migrations.versions.0001_initial",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "src.agentvault_mcp.db.migrations.versions.0001_initial",
        "description": "src.agentvault_mcp.db.migrations.versions.0001_initial",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade() -> None:\n    op.create_table(\n        \"wallets\",\n        sa.Column(\"id\", sa.String(length=36), primary_key=True),\n        sa.Column(\"agent_id\", sa.String(length=255), nullable=False, unique=True),\n        sa.Column(\"address\", sa.String(length=42), nullable=False),\n        sa.Column(\"encrypted_privkey\", sa.LargeBinary(), nullable=False),\n        sa.Column(\"chain_id\", sa.Integer(), nullable=False),",
        "detail": "src.agentvault_mcp.db.migrations.versions.0001_initial",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "src.agentvault_mcp.db.migrations.versions.0001_initial",
        "description": "src.agentvault_mcp.db.migrations.versions.0001_initial",
        "peekOfCode": "depends_on = None\ndef upgrade() -> None:\n    op.create_table(\n        \"wallets\",\n        sa.Column(\"id\", sa.String(length=36), primary_key=True),\n        sa.Column(\"agent_id\", sa.String(length=255), nullable=False, unique=True),\n        sa.Column(\"address\", sa.String(length=42), nullable=False),\n        sa.Column(\"encrypted_privkey\", sa.LargeBinary(), nullable=False),\n        sa.Column(\"chain_id\", sa.Integer(), nullable=False),\n        sa.Column(\"last_nonce\", sa.Integer()),",
        "detail": "src.agentvault_mcp.db.migrations.versions.0001_initial",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "src.agentvault_mcp.db.migrations.versions.0002_multi_tenant",
        "description": "src.agentvault_mcp.db.migrations.versions.0002_multi_tenant",
        "peekOfCode": "def upgrade() -> None:\n    op.create_table(\n        \"tenants\",\n        sa.Column(\"id\", sa.String(length=36), primary_key=True),\n        sa.Column(\"name\", sa.String(length=255), nullable=False, unique=True),\n        sa.Column(\"plan\", sa.String(length=64), nullable=False, server_default=\"starter\"),\n        sa.Column(\"api_key_hash\", sa.String(length=128), nullable=False),\n        sa.Column(\"metadata_json\", sa.JSON(), nullable=True),\n        sa.Column(\"created_at\", sa.DateTime(timezone=True), server_default=sa.func.now()),\n    )",
        "detail": "src.agentvault_mcp.db.migrations.versions.0002_multi_tenant",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "src.agentvault_mcp.db.migrations.versions.0002_multi_tenant",
        "description": "src.agentvault_mcp.db.migrations.versions.0002_multi_tenant",
        "peekOfCode": "def downgrade() -> None:\n    with op.batch_alter_table(\"mcp_events\") as batch:\n        batch.drop_index(\"ix_mcp_events_tenant_id\")\n        batch.drop_column(\"tenant_id\")\n    with op.batch_alter_table(\"strategy_runs\") as batch:\n        batch.drop_index(\"ix_strategy_runs_tenant_id\")\n        batch.drop_column(\"tenant_id\")\n    with op.batch_alter_table(\"strategies\") as batch:\n        batch.drop_index(\"ix_strategies_tenant_id\")\n        batch.drop_column(\"tenant_id\")",
        "detail": "src.agentvault_mcp.db.migrations.versions.0002_multi_tenant",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "src.agentvault_mcp.db.migrations.versions.0002_multi_tenant",
        "description": "src.agentvault_mcp.db.migrations.versions.0002_multi_tenant",
        "peekOfCode": "revision = \"0002_multi_tenant\"\ndown_revision = \"0001_initial\"\nbranch_labels = None\ndepends_on = None\ndef upgrade() -> None:\n    op.create_table(\n        \"tenants\",\n        sa.Column(\"id\", sa.String(length=36), primary_key=True),\n        sa.Column(\"name\", sa.String(length=255), nullable=False, unique=True),\n        sa.Column(\"plan\", sa.String(length=64), nullable=False, server_default=\"starter\"),",
        "detail": "src.agentvault_mcp.db.migrations.versions.0002_multi_tenant",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "src.agentvault_mcp.db.migrations.versions.0002_multi_tenant",
        "description": "src.agentvault_mcp.db.migrations.versions.0002_multi_tenant",
        "peekOfCode": "down_revision = \"0001_initial\"\nbranch_labels = None\ndepends_on = None\ndef upgrade() -> None:\n    op.create_table(\n        \"tenants\",\n        sa.Column(\"id\", sa.String(length=36), primary_key=True),\n        sa.Column(\"name\", sa.String(length=255), nullable=False, unique=True),\n        sa.Column(\"plan\", sa.String(length=64), nullable=False, server_default=\"starter\"),\n        sa.Column(\"api_key_hash\", sa.String(length=128), nullable=False),",
        "detail": "src.agentvault_mcp.db.migrations.versions.0002_multi_tenant",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "src.agentvault_mcp.db.migrations.versions.0002_multi_tenant",
        "description": "src.agentvault_mcp.db.migrations.versions.0002_multi_tenant",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade() -> None:\n    op.create_table(\n        \"tenants\",\n        sa.Column(\"id\", sa.String(length=36), primary_key=True),\n        sa.Column(\"name\", sa.String(length=255), nullable=False, unique=True),\n        sa.Column(\"plan\", sa.String(length=64), nullable=False, server_default=\"starter\"),\n        sa.Column(\"api_key_hash\", sa.String(length=128), nullable=False),\n        sa.Column(\"metadata_json\", sa.JSON(), nullable=True),",
        "detail": "src.agentvault_mcp.db.migrations.versions.0002_multi_tenant",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "src.agentvault_mcp.db.migrations.versions.0002_multi_tenant",
        "description": "src.agentvault_mcp.db.migrations.versions.0002_multi_tenant",
        "peekOfCode": "depends_on = None\ndef upgrade() -> None:\n    op.create_table(\n        \"tenants\",\n        sa.Column(\"id\", sa.String(length=36), primary_key=True),\n        sa.Column(\"name\", sa.String(length=255), nullable=False, unique=True),\n        sa.Column(\"plan\", sa.String(length=64), nullable=False, server_default=\"starter\"),\n        sa.Column(\"api_key_hash\", sa.String(length=128), nullable=False),\n        sa.Column(\"metadata_json\", sa.JSON(), nullable=True),\n        sa.Column(\"created_at\", sa.DateTime(timezone=True), server_default=sa.func.now()),",
        "detail": "src.agentvault_mcp.db.migrations.versions.0002_multi_tenant",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "src.agentvault_mcp.db.migrations.env",
        "description": "src.agentvault_mcp.db.migrations.env",
        "peekOfCode": "def run_migrations_offline() -> None:\n    url = config.get_main_option(\"sqlalchemy.url\")\n    context.configure(url=url, target_metadata=target_metadata, literal_binds=True)\n    with context.begin_transaction():\n        context.run_migrations()\ndef run_migrations_online() -> None:\n    url = config.get_main_option(\"sqlalchemy.url\")\n    engine = get_sync_engine(url)\n    with engine.connect() as connection:\n        context.configure(connection=connection, target_metadata=target_metadata, render_as_batch=True)",
        "detail": "src.agentvault_mcp.db.migrations.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "src.agentvault_mcp.db.migrations.env",
        "description": "src.agentvault_mcp.db.migrations.env",
        "peekOfCode": "def run_migrations_online() -> None:\n    url = config.get_main_option(\"sqlalchemy.url\")\n    engine = get_sync_engine(url)\n    with engine.connect() as connection:\n        context.configure(connection=connection, target_metadata=target_metadata, render_as_batch=True)\n        with context.begin_transaction():\n            context.run_migrations()\nif context.is_offline_mode():\n    run_migrations_offline()\nelse:",
        "detail": "src.agentvault_mcp.db.migrations.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "src.agentvault_mcp.db.migrations.env",
        "description": "src.agentvault_mcp.db.migrations.env",
        "peekOfCode": "config = context.config\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\ntarget_metadata = Base.metadata\ndef run_migrations_offline() -> None:\n    url = config.get_main_option(\"sqlalchemy.url\")\n    context.configure(url=url, target_metadata=target_metadata, literal_binds=True)\n    with context.begin_transaction():\n        context.run_migrations()\ndef run_migrations_online() -> None:",
        "detail": "src.agentvault_mcp.db.migrations.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "src.agentvault_mcp.db.migrations.env",
        "description": "src.agentvault_mcp.db.migrations.env",
        "peekOfCode": "target_metadata = Base.metadata\ndef run_migrations_offline() -> None:\n    url = config.get_main_option(\"sqlalchemy.url\")\n    context.configure(url=url, target_metadata=target_metadata, literal_binds=True)\n    with context.begin_transaction():\n        context.run_migrations()\ndef run_migrations_online() -> None:\n    url = config.get_main_option(\"sqlalchemy.url\")\n    engine = get_sync_engine(url)\n    with engine.connect() as connection:",
        "detail": "src.agentvault_mcp.db.migrations.env",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "src.agentvault_mcp.db.cli",
        "description": "src.agentvault_mcp.db.cli",
        "peekOfCode": "def upgrade(database_url: str | None = None, revision: str = \"head\") -> None:\n    cfg = _resolve_alembic_config(database_url)\n    command.upgrade(cfg, revision)\ndef downgrade(database_url: str | None = None, revision: str = \"-1\") -> None:\n    cfg = _resolve_alembic_config(database_url)\n    command.downgrade(cfg, revision)\ndef stamp(database_url: str | None = None, revision: str = \"head\") -> None:\n    cfg = _resolve_alembic_config(database_url)\n    command.stamp(cfg, revision)\ndef main() -> None:",
        "detail": "src.agentvault_mcp.db.cli",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "src.agentvault_mcp.db.cli",
        "description": "src.agentvault_mcp.db.cli",
        "peekOfCode": "def downgrade(database_url: str | None = None, revision: str = \"-1\") -> None:\n    cfg = _resolve_alembic_config(database_url)\n    command.downgrade(cfg, revision)\ndef stamp(database_url: str | None = None, revision: str = \"head\") -> None:\n    cfg = _resolve_alembic_config(database_url)\n    command.stamp(cfg, revision)\ndef main() -> None:\n    parser = argparse.ArgumentParser(description=\"VaultPilot database migration utility\")\n    parser.add_argument(\"action\", choices=[\"upgrade\", \"downgrade\", \"stamp\"], help=\"Migration command\")\n    parser.add_argument(\"revision\", nargs=\"?\", default=\"head\", help=\"Target revision\")",
        "detail": "src.agentvault_mcp.db.cli",
        "documentation": {}
    },
    {
        "label": "stamp",
        "kind": 2,
        "importPath": "src.agentvault_mcp.db.cli",
        "description": "src.agentvault_mcp.db.cli",
        "peekOfCode": "def stamp(database_url: str | None = None, revision: str = \"head\") -> None:\n    cfg = _resolve_alembic_config(database_url)\n    command.stamp(cfg, revision)\ndef main() -> None:\n    parser = argparse.ArgumentParser(description=\"VaultPilot database migration utility\")\n    parser.add_argument(\"action\", choices=[\"upgrade\", \"downgrade\", \"stamp\"], help=\"Migration command\")\n    parser.add_argument(\"revision\", nargs=\"?\", default=\"head\", help=\"Target revision\")\n    parser.add_argument(\"--database-url\", dest=\"database_url\")\n    args = parser.parse_args()\n    if args.action == \"upgrade\":",
        "detail": "src.agentvault_mcp.db.cli",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "src.agentvault_mcp.db.cli",
        "description": "src.agentvault_mcp.db.cli",
        "peekOfCode": "def main() -> None:\n    parser = argparse.ArgumentParser(description=\"VaultPilot database migration utility\")\n    parser.add_argument(\"action\", choices=[\"upgrade\", \"downgrade\", \"stamp\"], help=\"Migration command\")\n    parser.add_argument(\"revision\", nargs=\"?\", default=\"head\", help=\"Target revision\")\n    parser.add_argument(\"--database-url\", dest=\"database_url\")\n    args = parser.parse_args()\n    if args.action == \"upgrade\":\n        upgrade(args.database_url, args.revision)\n    elif args.action == \"downgrade\":\n        downgrade(args.database_url, args.revision)",
        "detail": "src.agentvault_mcp.db.cli",
        "documentation": {}
    },
    {
        "label": "get_async_engine",
        "kind": 2,
        "importPath": "src.agentvault_mcp.db.engine",
        "description": "src.agentvault_mcp.db.engine",
        "peekOfCode": "def get_async_engine(database_url: Optional[str] = None) -> AsyncEngine:\n    url = _coerce_database_url(database_url)\n    return create_async_engine(url, pool_pre_ping=True, future=True)\n@lru_cache\ndef get_sync_engine(database_url: Optional[str] = None) -> Engine:\n    url = _coerce_database_url(database_url)\n    if url.startswith(\"sqlite+aiosqlite\"):\n        url = url.replace(\"sqlite+aiosqlite\", \"sqlite+pysqlite\")\n    return create_engine(url, pool_pre_ping=True, future=True)\n@lru_cache",
        "detail": "src.agentvault_mcp.db.engine",
        "documentation": {}
    },
    {
        "label": "get_sync_engine",
        "kind": 2,
        "importPath": "src.agentvault_mcp.db.engine",
        "description": "src.agentvault_mcp.db.engine",
        "peekOfCode": "def get_sync_engine(database_url: Optional[str] = None) -> Engine:\n    url = _coerce_database_url(database_url)\n    if url.startswith(\"sqlite+aiosqlite\"):\n        url = url.replace(\"sqlite+aiosqlite\", \"sqlite+pysqlite\")\n    return create_engine(url, pool_pre_ping=True, future=True)\n@lru_cache\ndef get_session_maker(database_url: Optional[str] = None) -> async_sessionmaker[AsyncSession]:\n    engine = get_async_engine(database_url)\n    return async_sessionmaker(engine, expire_on_commit=False, autoflush=False)\n__all__ = [",
        "detail": "src.agentvault_mcp.db.engine",
        "documentation": {}
    },
    {
        "label": "get_session_maker",
        "kind": 2,
        "importPath": "src.agentvault_mcp.db.engine",
        "description": "src.agentvault_mcp.db.engine",
        "peekOfCode": "def get_session_maker(database_url: Optional[str] = None) -> async_sessionmaker[AsyncSession]:\n    engine = get_async_engine(database_url)\n    return async_sessionmaker(engine, expire_on_commit=False, autoflush=False)\n__all__ = [\n    \"get_async_engine\",\n    \"get_sync_engine\",\n    \"get_session_maker\",\n]",
        "detail": "src.agentvault_mcp.db.engine",
        "documentation": {}
    },
    {
        "label": "_DEFAULT_DB_URL",
        "kind": 5,
        "importPath": "src.agentvault_mcp.db.engine",
        "description": "src.agentvault_mcp.db.engine",
        "peekOfCode": "_DEFAULT_DB_URL = \"sqlite+aiosqlite:///vaultpilot.db\"\n_SYNC_SQLITE_FALLBACK = \"sqlite+pysqlite:///vaultpilot.db\"\ndef _coerce_database_url(url: Optional[str]) -> str:\n    if url:\n        return url\n    return os.getenv(\"VAULTPILOT_DATABASE_URL\", _DEFAULT_DB_URL)\n@lru_cache\ndef get_async_engine(database_url: Optional[str] = None) -> AsyncEngine:\n    url = _coerce_database_url(database_url)\n    return create_async_engine(url, pool_pre_ping=True, future=True)",
        "detail": "src.agentvault_mcp.db.engine",
        "documentation": {}
    },
    {
        "label": "_SYNC_SQLITE_FALLBACK",
        "kind": 5,
        "importPath": "src.agentvault_mcp.db.engine",
        "description": "src.agentvault_mcp.db.engine",
        "peekOfCode": "_SYNC_SQLITE_FALLBACK = \"sqlite+pysqlite:///vaultpilot.db\"\ndef _coerce_database_url(url: Optional[str]) -> str:\n    if url:\n        return url\n    return os.getenv(\"VAULTPILOT_DATABASE_URL\", _DEFAULT_DB_URL)\n@lru_cache\ndef get_async_engine(database_url: Optional[str] = None) -> AsyncEngine:\n    url = _coerce_database_url(database_url)\n    return create_async_engine(url, pool_pre_ping=True, future=True)\n@lru_cache",
        "detail": "src.agentvault_mcp.db.engine",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "src.agentvault_mcp.db.engine",
        "description": "src.agentvault_mcp.db.engine",
        "peekOfCode": "__all__ = [\n    \"get_async_engine\",\n    \"get_sync_engine\",\n    \"get_session_maker\",\n]",
        "detail": "src.agentvault_mcp.db.engine",
        "documentation": {}
    },
    {
        "label": "import_legacy_data",
        "kind": 2,
        "importPath": "src.agentvault_mcp.db.import_legacy",
        "description": "src.agentvault_mcp.db.import_legacy",
        "peekOfCode": "def import_legacy_data(\n    *,\n    wallet_store: Path | None,\n    strategy_store: Path | None,\n    database_url: str | None = None,\n) -> Dict[str, int]:\n    \"\"\"Import legacy JSON stores into the VaultPilot database.\"\"\"\n    upgrade(database_url)\n    session_maker = get_session_maker(database_url)\n    summary = {",
        "detail": "src.agentvault_mcp.db.import_legacy",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "src.agentvault_mcp.db.import_legacy",
        "description": "src.agentvault_mcp.db.import_legacy",
        "peekOfCode": "def main() -> None:\n    parser = argparse.ArgumentParser(description=\"Import legacy AgentVault JSON stores into the database\")\n    parser.add_argument(\"--wallet-store\", type=Path, default=Path(\"agentvault_store.json\"))\n    parser.add_argument(\"--strategy-store\", type=Path, default=Path(\"agentvault_strategies.json\"))\n    parser.add_argument(\"--database-url\")\n    args = parser.parse_args()\n    summary = import_legacy_data(\n        wallet_store=args.wallet_store,\n        strategy_store=args.strategy_store,\n        database_url=args.database_url,",
        "detail": "src.agentvault_mcp.db.import_legacy",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": "src.agentvault_mcp.db.models",
        "description": "src.agentvault_mcp.db.models",
        "peekOfCode": "class Base(DeclarativeBase):\n    pass\nUUID_TYPE = String(36)\ndef _uuid_str() -> str:\n    return str(uuid.uuid4())\nclass Wallet(Base):\n    __tablename__ = \"wallets\"\n    id: Mapped[str] = mapped_column(UUID_TYPE, primary_key=True, default=_uuid_str)\n    tenant_id: Mapped[str] = mapped_column(String(36), nullable=False, index=True, default=\"default\")\n    agent_id: Mapped[str] = mapped_column(String(255), unique=True, nullable=False)",
        "detail": "src.agentvault_mcp.db.models",
        "documentation": {}
    },
    {
        "label": "Wallet",
        "kind": 6,
        "importPath": "src.agentvault_mcp.db.models",
        "description": "src.agentvault_mcp.db.models",
        "peekOfCode": "class Wallet(Base):\n    __tablename__ = \"wallets\"\n    id: Mapped[str] = mapped_column(UUID_TYPE, primary_key=True, default=_uuid_str)\n    tenant_id: Mapped[str] = mapped_column(String(36), nullable=False, index=True, default=\"default\")\n    agent_id: Mapped[str] = mapped_column(String(255), unique=True, nullable=False)\n    address: Mapped[str] = mapped_column(String(42), nullable=False)\n    encrypted_privkey: Mapped[bytes] = mapped_column(LargeBinary, nullable=False)\n    chain_id: Mapped[int] = mapped_column(Integer, nullable=False)\n    last_nonce: Mapped[int | None] = mapped_column(Integer)\n    metadata_json: Mapped[dict | None] = mapped_column(JSON, default=dict)",
        "detail": "src.agentvault_mcp.db.models",
        "documentation": {}
    },
    {
        "label": "Strategy",
        "kind": 6,
        "importPath": "src.agentvault_mcp.db.models",
        "description": "src.agentvault_mcp.db.models",
        "peekOfCode": "class Strategy(Base):\n    __tablename__ = \"strategies\"\n    __table_args__ = (UniqueConstraint(\"label\"),)\n    id: Mapped[str] = mapped_column(UUID_TYPE, primary_key=True, default=_uuid_str)\n    tenant_id: Mapped[str] = mapped_column(String(36), nullable=False, index=True, default=\"default\")\n    label: Mapped[str] = mapped_column(String(255), nullable=False)\n    agent_id: Mapped[str] = mapped_column(String(255), nullable=False)\n    strategy_type: Mapped[str] = mapped_column(String(64), nullable=False)\n    to_address: Mapped[str] = mapped_column(String(64), nullable=False)\n    amount_eth: Mapped[float] = mapped_column(Float, nullable=False)",
        "detail": "src.agentvault_mcp.db.models",
        "documentation": {}
    },
    {
        "label": "StrategyRun",
        "kind": 6,
        "importPath": "src.agentvault_mcp.db.models",
        "description": "src.agentvault_mcp.db.models",
        "peekOfCode": "class StrategyRun(Base):\n    __tablename__ = \"strategy_runs\"\n    id: Mapped[str] = mapped_column(UUID_TYPE, primary_key=True, default=_uuid_str)\n    strategy_id: Mapped[str] = mapped_column(String(36), nullable=False)\n    tenant_id: Mapped[str] = mapped_column(String(36), nullable=False, index=True, default=\"default\")\n    run_at: Mapped[datetime] = mapped_column(DateTime(timezone=True), default=func.now)\n    result: Mapped[str] = mapped_column(String(32), nullable=False)\n    tx_hash: Mapped[str | None] = mapped_column(String(120))\n    detail: Mapped[dict | None] = mapped_column(JSON)\nclass MCPEvent(Base):",
        "detail": "src.agentvault_mcp.db.models",
        "documentation": {}
    },
    {
        "label": "MCPEvent",
        "kind": 6,
        "importPath": "src.agentvault_mcp.db.models",
        "description": "src.agentvault_mcp.db.models",
        "peekOfCode": "class MCPEvent(Base):\n    __tablename__ = \"mcp_events\"\n    id: Mapped[str] = mapped_column(UUID_TYPE, primary_key=True, default=_uuid_str)\n    tenant_id: Mapped[str] = mapped_column(String(36), nullable=False, index=True, default=\"default\")\n    occurred_at: Mapped[datetime] = mapped_column(DateTime(timezone=True), server_default=func.now())\n    tool_name: Mapped[str] = mapped_column(String(255), nullable=False)\n    agent_id: Mapped[str | None] = mapped_column(String(255))\n    status: Mapped[str] = mapped_column(String(32), nullable=False)\n    request_payload: Mapped[dict | None] = mapped_column(JSON)\n    response_payload: Mapped[dict | None] = mapped_column(JSON)",
        "detail": "src.agentvault_mcp.db.models",
        "documentation": {}
    },
    {
        "label": "Tenant",
        "kind": 6,
        "importPath": "src.agentvault_mcp.db.models",
        "description": "src.agentvault_mcp.db.models",
        "peekOfCode": "class Tenant(Base):\n    __tablename__ = \"tenants\"\n    id: Mapped[str] = mapped_column(UUID_TYPE, primary_key=True, default=_uuid_str)\n    name: Mapped[str] = mapped_column(String(255), nullable=False, unique=True)\n    plan: Mapped[str] = mapped_column(String(64), nullable=False, default=\"starter\")\n    api_key_hash: Mapped[str] = mapped_column(String(128), nullable=False)\n    metadata_json: Mapped[dict | None] = mapped_column(JSON, default=dict)\n    created_at: Mapped[datetime] = mapped_column(DateTime(timezone=True), server_default=func.now())",
        "detail": "src.agentvault_mcp.db.models",
        "documentation": {}
    },
    {
        "label": "UUID_TYPE",
        "kind": 5,
        "importPath": "src.agentvault_mcp.db.models",
        "description": "src.agentvault_mcp.db.models",
        "peekOfCode": "UUID_TYPE = String(36)\ndef _uuid_str() -> str:\n    return str(uuid.uuid4())\nclass Wallet(Base):\n    __tablename__ = \"wallets\"\n    id: Mapped[str] = mapped_column(UUID_TYPE, primary_key=True, default=_uuid_str)\n    tenant_id: Mapped[str] = mapped_column(String(36), nullable=False, index=True, default=\"default\")\n    agent_id: Mapped[str] = mapped_column(String(255), unique=True, nullable=False)\n    address: Mapped[str] = mapped_column(String(42), nullable=False)\n    encrypted_privkey: Mapped[bytes] = mapped_column(LargeBinary, nullable=False)",
        "detail": "src.agentvault_mcp.db.models",
        "documentation": {}
    },
    {
        "label": "WalletRepository",
        "kind": 6,
        "importPath": "src.agentvault_mcp.db.repositories",
        "description": "src.agentvault_mcp.db.repositories",
        "peekOfCode": "class WalletRepository:\n    def __init__(self, session: AsyncSession, tenant_id: str) -> None:\n        self.session = session\n        self.tenant_id = tenant_id\n    async def list_wallets(self) -> list[Wallet]:\n        result = await self.session.execute(\n            select(Wallet).where(Wallet.tenant_id == self.tenant_id)\n        )\n        return list(result.scalars().all())\n    async def get_by_agent_id(self, agent_id: str) -> Wallet | None:",
        "detail": "src.agentvault_mcp.db.repositories",
        "documentation": {}
    },
    {
        "label": "StrategyRepository",
        "kind": 6,
        "importPath": "src.agentvault_mcp.db.repositories",
        "description": "src.agentvault_mcp.db.repositories",
        "peekOfCode": "class StrategyRepository:\n    def __init__(self, session: AsyncSession, tenant_id: str) -> None:\n        self.session = session\n        self.tenant_id = tenant_id\n    async def list_strategies(self, agent_id: str | None = None) -> list[Strategy]:\n        stmt = select(Strategy).where(Strategy.tenant_id == self.tenant_id)\n        if agent_id:\n            stmt = stmt.where(Strategy.agent_id == agent_id)\n        result = await self.session.execute(stmt.order_by(Strategy.label))\n        return list(result.scalars().all())",
        "detail": "src.agentvault_mcp.db.repositories",
        "documentation": {}
    },
    {
        "label": "StrategyRunRepository",
        "kind": 6,
        "importPath": "src.agentvault_mcp.db.repositories",
        "description": "src.agentvault_mcp.db.repositories",
        "peekOfCode": "class StrategyRunRepository:\n     def __init__(self, session: AsyncSession, tenant_id: str) -> None:\n         self.session = session\n         self.tenant_id = tenant_id\n     async def add_run(\n         self,\n         *,\n         strategy_id: str,\n         result: str,\n         tx_hash: str | None,",
        "detail": "src.agentvault_mcp.db.repositories",
        "documentation": {}
    },
    {
        "label": "EventRepository",
        "kind": 6,
        "importPath": "src.agentvault_mcp.db.repositories",
        "description": "src.agentvault_mcp.db.repositories",
        "peekOfCode": "class EventRepository:\n     def __init__(self, session: AsyncSession, tenant_id: str | None = None) -> None:\n         self.session = session\n         self.tenant_id = tenant_id\n     async def record_event(\n         self,\n         *,\n         tool_name: str,\n         agent_id: str | None,\n         status: str,",
        "detail": "src.agentvault_mcp.db.repositories",
        "documentation": {}
    },
    {
        "label": "TenantRepository",
        "kind": 6,
        "importPath": "src.agentvault_mcp.db.repositories",
        "description": "src.agentvault_mcp.db.repositories",
        "peekOfCode": "class TenantRepository:\n     def __init__(self, session: AsyncSession) -> None:\n         self.session = session\n     async def list_tenants(self) -> list[Tenant]:\n         result = await self.session.execute(select(Tenant).order_by(Tenant.created_at))\n         return list(result.scalars().all())\n     async def get_by_id(self, tenant_id: str) -> Tenant | None:\n         stmt = select(Tenant).where(Tenant.id == tenant_id)\n         result = await self.session.execute(stmt)\n         return result.scalar_one_or_none()",
        "detail": "src.agentvault_mcp.db.repositories",
        "documentation": {}
    },
    {
        "label": "EventModel",
        "kind": 6,
        "importPath": "src.agentvault_mcp.admin_api",
        "description": "src.agentvault_mcp.admin_api",
        "peekOfCode": "class EventModel(BaseModel):\n    id: str\n    occurred_at: str\n    tool_name: str\n    agent_id: Optional[str]\n    status: str\n    request_payload: Optional[dict[str, Any]]\n    response_payload: Optional[dict[str, Any]]\n    error_message: Optional[str]\nclass PolicyModel(BaseModel):",
        "detail": "src.agentvault_mcp.admin_api",
        "documentation": {}
    },
    {
        "label": "PolicyModel",
        "kind": 6,
        "importPath": "src.agentvault_mcp.admin_api",
        "description": "src.agentvault_mcp.admin_api",
        "peekOfCode": "class PolicyModel(BaseModel):\n    default_rate_limit: dict[str, Any]\n    tool_overrides: dict[str, dict[str, Any]]\nclass UsageRecord(BaseModel):\n    agent_id: Optional[str]\n    tool_name: str\n    count: int\ndef create_app(policy_engine: PolicyEngine) -> FastAPI:\n    app = FastAPI(title=\"VaultPilot Admin API\", version=\"0.1\")\n    def get_policy_engine() -> PolicyEngine:",
        "detail": "src.agentvault_mcp.admin_api",
        "documentation": {}
    },
    {
        "label": "UsageRecord",
        "kind": 6,
        "importPath": "src.agentvault_mcp.admin_api",
        "description": "src.agentvault_mcp.admin_api",
        "peekOfCode": "class UsageRecord(BaseModel):\n    agent_id: Optional[str]\n    tool_name: str\n    count: int\ndef create_app(policy_engine: PolicyEngine) -> FastAPI:\n    app = FastAPI(title=\"VaultPilot Admin API\", version=\"0.1\")\n    def get_policy_engine() -> PolicyEngine:\n        return policy_engine\n    async def get_event_repo(engine: PolicyEngine = Depends(get_policy_engine)) -> EventRepository:\n        session = engine.session_maker()",
        "detail": "src.agentvault_mcp.admin_api",
        "documentation": {}
    },
    {
        "label": "create_app",
        "kind": 2,
        "importPath": "src.agentvault_mcp.admin_api",
        "description": "src.agentvault_mcp.admin_api",
        "peekOfCode": "def create_app(policy_engine: PolicyEngine) -> FastAPI:\n    app = FastAPI(title=\"VaultPilot Admin API\", version=\"0.1\")\n    def get_policy_engine() -> PolicyEngine:\n        return policy_engine\n    async def get_event_repo(engine: PolicyEngine = Depends(get_policy_engine)) -> EventRepository:\n        session = engine.session_maker()\n        try:\n            repo = EventRepository(session)\n            yield repo\n        finally:",
        "detail": "src.agentvault_mcp.admin_api",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "src.agentvault_mcp.cli",
        "description": "src.agentvault_mcp.cli",
        "peekOfCode": "def main() -> None:  # pragma: no cover\n    p = argparse.ArgumentParser(prog=\"agentvault\", description=\"AgentVault CLI\")\n    sub = p.add_subparsers(dest=\"cmd\", required=True)\n    s = sub.add_parser(\"create-wallet\")\n    s.add_argument(\"agent_id\")\n    s.set_defaults(func=_cmd_create_wallet)\n    s = sub.add_parser(\"list-wallets\")\n    s.set_defaults(func=_cmd_list_wallets)\n    s = sub.add_parser(\"balance\")\n    s.add_argument(\"agent_id\")",
        "detail": "src.agentvault_mcp.cli",
        "documentation": {}
    },
    {
        "label": "get_rpc_url",
        "kind": 2,
        "importPath": "src.agentvault_mcp.config",
        "description": "src.agentvault_mcp.config",
        "peekOfCode": "def get_rpc_url() -> str:\n    \"\"\"Get RPC URL with proper fallback chain.\n    Priority order:\n    1. WEB3_RPC_URL environment variable\n    2. ALCHEMY_HTTP_URL environment variable\n    3. Auto-generated Alchemy URL from ALCHEMY_API_KEY + ALCHEMY_NETWORK\n    4. Default public Sepolia endpoint\n    \"\"\"\n    # Check explicit environment variables first\n    rpc_url = os.getenv(\"WEB3_RPC_URL\") or os.getenv(\"ALCHEMY_HTTP_URL\")",
        "detail": "src.agentvault_mcp.config",
        "documentation": {}
    },
    {
        "label": "get_or_create_encrypt_key",
        "kind": 2,
        "importPath": "src.agentvault_mcp.config",
        "description": "src.agentvault_mcp.config",
        "peekOfCode": "def get_or_create_encrypt_key() -> str:\n    \"\"\"Get encryption key or create/persist one if not provided.\n    Returns:\n        Valid Fernet encryption key as string\n    Raises:\n        RuntimeError: If provided key is invalid and no fallback available\n    \"\"\"\n    encrypt_key = os.getenv(\"ENCRYPT_KEY\")\n    store_path = os.getenv(\"AGENTVAULT_STORE\", DEFAULT_STORE_PATH)\n    key_path = os.path.splitext(store_path)[0] + \".key\"",
        "detail": "src.agentvault_mcp.config",
        "documentation": {}
    },
    {
        "label": "get_context_config",
        "kind": 2,
        "importPath": "src.agentvault_mcp.config",
        "description": "src.agentvault_mcp.config",
        "peekOfCode": "def get_context_config() -> dict:\n    \"\"\"Get context management configuration.\"\"\"\n    return {\n        \"max_tokens\": int(os.getenv(\"MCP_MAX_TOKENS\", DEFAULT_MAX_TOKENS)),\n        \"completion_max_tokens\": DEFAULT_COMPLETION_TOKENS,\n        \"trim_threshold\": CONTEXT_TRIM_THRESHOLD,\n        \"trim_target\": CONTEXT_TRIM_TARGET,\n    }\ndef get_database_url() -> str:\n    \"\"\"Get database URL from environment or use default.\"\"\"",
        "detail": "src.agentvault_mcp.config",
        "documentation": {}
    },
    {
        "label": "get_database_url",
        "kind": 2,
        "importPath": "src.agentvault_mcp.config",
        "description": "src.agentvault_mcp.config",
        "peekOfCode": "def get_database_url() -> str:\n    \"\"\"Get database URL from environment or use default.\"\"\"\n    return os.getenv(\"VAULTPILOT_DATABASE_URL\", \"sqlite+aiosqlite:///vaultpilot.db\")\ndef get_policy_path() -> str:\n    \"\"\"Get policy configuration file path.\"\"\"\n    return os.getenv(\"VAULTPILOT_POLICY_PATH\", \"vaultpilot_policy.yml\")\ndef get_openai_api_key() -> str | None:\n    \"\"\"Get OpenAI API key from environment.\"\"\"\n    return os.getenv(\"OPENAI_API_KEY\")\ndef get_openai_model() -> str:",
        "detail": "src.agentvault_mcp.config",
        "documentation": {}
    },
    {
        "label": "get_policy_path",
        "kind": 2,
        "importPath": "src.agentvault_mcp.config",
        "description": "src.agentvault_mcp.config",
        "peekOfCode": "def get_policy_path() -> str:\n    \"\"\"Get policy configuration file path.\"\"\"\n    return os.getenv(\"VAULTPILOT_POLICY_PATH\", \"vaultpilot_policy.yml\")\ndef get_openai_api_key() -> str | None:\n    \"\"\"Get OpenAI API key from environment.\"\"\"\n    return os.getenv(\"OPENAI_API_KEY\")\ndef get_openai_model() -> str:\n    \"\"\"Get OpenAI model name from environment.\"\"\"\n    return os.getenv(\"OPENAI_MODEL\", \"gpt-4o-mini\")\ndef get_ollama_config() -> tuple[str, str]:",
        "detail": "src.agentvault_mcp.config",
        "documentation": {}
    },
    {
        "label": "get_openai_api_key",
        "kind": 2,
        "importPath": "src.agentvault_mcp.config",
        "description": "src.agentvault_mcp.config",
        "peekOfCode": "def get_openai_api_key() -> str | None:\n    \"\"\"Get OpenAI API key from environment.\"\"\"\n    return os.getenv(\"OPENAI_API_KEY\")\ndef get_openai_model() -> str:\n    \"\"\"Get OpenAI model name from environment.\"\"\"\n    return os.getenv(\"OPENAI_MODEL\", \"gpt-4o-mini\")\ndef get_ollama_config() -> tuple[str, str]:\n    \"\"\"Get Ollama host and model configuration.\"\"\"\n    host = os.getenv(\"OLLAMA_HOST\", \"http://127.0.0.1:11434\").rstrip(\"/\")\n    model = os.getenv(\"OLLAMA_MODEL\", \"llama3.1:8b\")",
        "detail": "src.agentvault_mcp.config",
        "documentation": {}
    },
    {
        "label": "get_openai_model",
        "kind": 2,
        "importPath": "src.agentvault_mcp.config",
        "description": "src.agentvault_mcp.config",
        "peekOfCode": "def get_openai_model() -> str:\n    \"\"\"Get OpenAI model name from environment.\"\"\"\n    return os.getenv(\"OPENAI_MODEL\", \"gpt-4o-mini\")\ndef get_ollama_config() -> tuple[str, str]:\n    \"\"\"Get Ollama host and model configuration.\"\"\"\n    host = os.getenv(\"OLLAMA_HOST\", \"http://127.0.0.1:11434\").rstrip(\"/\")\n    model = os.getenv(\"OLLAMA_MODEL\", \"llama3.1:8b\")\n    return host, model\ndef get_log_level() -> str:\n    \"\"\"Get logging level from environment.\"\"\"",
        "detail": "src.agentvault_mcp.config",
        "documentation": {}
    },
    {
        "label": "get_ollama_config",
        "kind": 2,
        "importPath": "src.agentvault_mcp.config",
        "description": "src.agentvault_mcp.config",
        "peekOfCode": "def get_ollama_config() -> tuple[str, str]:\n    \"\"\"Get Ollama host and model configuration.\"\"\"\n    host = os.getenv(\"OLLAMA_HOST\", \"http://127.0.0.1:11434\").rstrip(\"/\")\n    model = os.getenv(\"OLLAMA_MODEL\", \"llama3.1:8b\")\n    return host, model\ndef get_log_level() -> str:\n    \"\"\"Get logging level from environment.\"\"\"\n    return os.getenv(\"LOG_LEVEL\", \"INFO\").upper()\ndef get_admin_api_config() -> dict:\n    \"\"\"Get admin API server configuration.\"\"\"",
        "detail": "src.agentvault_mcp.config",
        "documentation": {}
    },
    {
        "label": "get_log_level",
        "kind": 2,
        "importPath": "src.agentvault_mcp.config",
        "description": "src.agentvault_mcp.config",
        "peekOfCode": "def get_log_level() -> str:\n    \"\"\"Get logging level from environment.\"\"\"\n    return os.getenv(\"LOG_LEVEL\", \"INFO\").upper()\ndef get_admin_api_config() -> dict:\n    \"\"\"Get admin API server configuration.\"\"\"\n    return {\n        \"host\": os.getenv(\"ADMIN_API_HOST\", \"127.0.0.1\"),\n        \"port\": int(os.getenv(\"ADMIN_API_PORT\", \"9900\")),\n        \"log_level\": os.getenv(\"ADMIN_API_LOG_LEVEL\", \"info\"),\n        \"reload\": os.getenv(\"ADMIN_API_RELOAD\", \"false\").lower() == \"true\",",
        "detail": "src.agentvault_mcp.config",
        "documentation": {}
    },
    {
        "label": "get_admin_api_config",
        "kind": 2,
        "importPath": "src.agentvault_mcp.config",
        "description": "src.agentvault_mcp.config",
        "peekOfCode": "def get_admin_api_config() -> dict:\n    \"\"\"Get admin API server configuration.\"\"\"\n    return {\n        \"host\": os.getenv(\"ADMIN_API_HOST\", \"127.0.0.1\"),\n        \"port\": int(os.getenv(\"ADMIN_API_PORT\", \"9900\")),\n        \"log_level\": os.getenv(\"ADMIN_API_LOG_LEVEL\", \"info\"),\n        \"reload\": os.getenv(\"ADMIN_API_RELOAD\", \"false\").lower() == \"true\",\n    }\ndef get_rate_limit_config() -> dict:\n    \"\"\"Get rate limiting configuration.\"\"\"",
        "detail": "src.agentvault_mcp.config",
        "documentation": {}
    },
    {
        "label": "get_rate_limit_config",
        "kind": 2,
        "importPath": "src.agentvault_mcp.config",
        "description": "src.agentvault_mcp.config",
        "peekOfCode": "def get_rate_limit_config() -> dict:\n    \"\"\"Get rate limiting configuration.\"\"\"\n    return {\n        \"calls\": int(os.getenv(\"RATE_LIMIT_CALLS\", DEFAULT_RATE_LIMIT_CALLS)),\n        \"window\": int(os.getenv(\"RATE_LIMIT_WINDOW\", DEFAULT_RATE_LIMIT_WINDOW)),\n    }\ndef get_wallet_config() -> dict:\n    \"\"\"Get wallet-specific configuration.\"\"\"\n    return {\n        \"max_transaction_eth\": get_max_transaction_eth(),",
        "detail": "src.agentvault_mcp.config",
        "documentation": {}
    },
    {
        "label": "get_wallet_config",
        "kind": 2,
        "importPath": "src.agentvault_mcp.config",
        "description": "src.agentvault_mcp.config",
        "peekOfCode": "def get_wallet_config() -> dict:\n    \"\"\"Get wallet-specific configuration.\"\"\"\n    return {\n        \"max_transaction_eth\": get_max_transaction_eth(),\n        \"confirmation_code\": get_confirmation_code(),\n        \"export_confirmation_code\": get_export_confirmation_code(),\n        \"allow_plaintext_export\": should_allow_plaintext_export(),\n        \"faucet_url\": get_faucet_url(),\n        \"store_path\": os.getenv(\"AGENTVAULT_STORE\", DEFAULT_STORE_PATH),\n    }",
        "detail": "src.agentvault_mcp.config",
        "documentation": {}
    },
    {
        "label": "get_ui_config",
        "kind": 2,
        "importPath": "src.agentvault_mcp.config",
        "description": "src.agentvault_mcp.config",
        "peekOfCode": "def get_ui_config() -> dict:\n    \"\"\"Get UI generation configuration.\"\"\"\n    return {\n        \"qr_size\": int(os.getenv(\"QR_SIZE\", \"256\")),\n        \"qr_border\": int(os.getenv(\"QR_BORDER\", \"4\")),\n        \"dashboard_refresh_seconds\": int(os.getenv(\"DASHBOARD_REFRESH_SECONDS\", \"30\")),\n    }\ndef get_max_transaction_eth() -> float | None:\n    \"\"\"Get maximum transaction amount requiring confirmation.\"\"\"\n    max_tx_env = os.getenv(\"AGENTVAULT_MAX_TX_ETH\")",
        "detail": "src.agentvault_mcp.config",
        "documentation": {}
    },
    {
        "label": "get_max_transaction_eth",
        "kind": 2,
        "importPath": "src.agentvault_mcp.config",
        "description": "src.agentvault_mcp.config",
        "peekOfCode": "def get_max_transaction_eth() -> float | None:\n    \"\"\"Get maximum transaction amount requiring confirmation.\"\"\"\n    max_tx_env = os.getenv(\"AGENTVAULT_MAX_TX_ETH\")\n    if not max_tx_env:\n        return None\n    try:\n        return float(max_tx_env)\n    except ValueError:\n        logger.warning(f\"Invalid AGENTVAULT_MAX_TX_ETH value: {max_tx_env}\")\n        return None",
        "detail": "src.agentvault_mcp.config",
        "documentation": {}
    },
    {
        "label": "get_confirmation_code",
        "kind": 2,
        "importPath": "src.agentvault_mcp.config",
        "description": "src.agentvault_mcp.config",
        "peekOfCode": "def get_confirmation_code() -> str | None:\n    \"\"\"Get transaction confirmation code.\"\"\"\n    return os.getenv(\"AGENTVAULT_TX_CONFIRM_CODE\")\ndef get_export_confirmation_code() -> str | None:\n    \"\"\"Get export confirmation code.\"\"\"\n    return os.getenv(\"AGENTVAULT_EXPORT_CODE\")\ndef should_allow_plaintext_export() -> bool:\n    \"\"\"Check if plaintext key export is allowed.\"\"\"\n    return os.getenv(\"AGENTVAULT_ALLOW_PLAINTEXT_EXPORT\") == \"1\"\ndef get_faucet_url() -> str | None:",
        "detail": "src.agentvault_mcp.config",
        "documentation": {}
    },
    {
        "label": "get_export_confirmation_code",
        "kind": 2,
        "importPath": "src.agentvault_mcp.config",
        "description": "src.agentvault_mcp.config",
        "peekOfCode": "def get_export_confirmation_code() -> str | None:\n    \"\"\"Get export confirmation code.\"\"\"\n    return os.getenv(\"AGENTVAULT_EXPORT_CODE\")\ndef should_allow_plaintext_export() -> bool:\n    \"\"\"Check if plaintext key export is allowed.\"\"\"\n    return os.getenv(\"AGENTVAULT_ALLOW_PLAINTEXT_EXPORT\") == \"1\"\ndef get_faucet_url() -> str | None:\n    \"\"\"Get faucet endpoint URL.\"\"\"\n    return os.getenv(\"AGENTVAULT_FAUCET_URL\")",
        "detail": "src.agentvault_mcp.config",
        "documentation": {}
    },
    {
        "label": "should_allow_plaintext_export",
        "kind": 2,
        "importPath": "src.agentvault_mcp.config",
        "description": "src.agentvault_mcp.config",
        "peekOfCode": "def should_allow_plaintext_export() -> bool:\n    \"\"\"Check if plaintext key export is allowed.\"\"\"\n    return os.getenv(\"AGENTVAULT_ALLOW_PLAINTEXT_EXPORT\") == \"1\"\ndef get_faucet_url() -> str | None:\n    \"\"\"Get faucet endpoint URL.\"\"\"\n    return os.getenv(\"AGENTVAULT_FAUCET_URL\")",
        "detail": "src.agentvault_mcp.config",
        "documentation": {}
    },
    {
        "label": "get_faucet_url",
        "kind": 2,
        "importPath": "src.agentvault_mcp.config",
        "description": "src.agentvault_mcp.config",
        "peekOfCode": "def get_faucet_url() -> str | None:\n    \"\"\"Get faucet endpoint URL.\"\"\"\n    return os.getenv(\"AGENTVAULT_FAUCET_URL\")",
        "detail": "src.agentvault_mcp.config",
        "documentation": {}
    },
    {
        "label": "DEFAULT_RPC_URL",
        "kind": 5,
        "importPath": "src.agentvault_mcp.config",
        "description": "src.agentvault_mcp.config",
        "peekOfCode": "DEFAULT_RPC_URL = \"https://ethereum-sepolia.publicnode.com\"\nDEFAULT_STORE_PATH = \"agentvault_store.json\"\nKEY_FILE_PERMISSIONS = 0o600\nRECEIPT_TIMEOUT_SECONDS = 120\nMAX_BACKOFF_DELAY = 2.0\nCONTEXT_TRIM_THRESHOLD = 0.9\nCONTEXT_TRIM_TARGET = 0.8\nDEFAULT_MAX_TOKENS = 4096\nDEFAULT_COMPLETION_TOKENS = 512\nDEFAULT_RATE_LIMIT_CALLS = 120",
        "detail": "src.agentvault_mcp.config",
        "documentation": {}
    },
    {
        "label": "DEFAULT_STORE_PATH",
        "kind": 5,
        "importPath": "src.agentvault_mcp.config",
        "description": "src.agentvault_mcp.config",
        "peekOfCode": "DEFAULT_STORE_PATH = \"agentvault_store.json\"\nKEY_FILE_PERMISSIONS = 0o600\nRECEIPT_TIMEOUT_SECONDS = 120\nMAX_BACKOFF_DELAY = 2.0\nCONTEXT_TRIM_THRESHOLD = 0.9\nCONTEXT_TRIM_TARGET = 0.8\nDEFAULT_MAX_TOKENS = 4096\nDEFAULT_COMPLETION_TOKENS = 512\nDEFAULT_RATE_LIMIT_CALLS = 120\nDEFAULT_RATE_LIMIT_WINDOW = 60",
        "detail": "src.agentvault_mcp.config",
        "documentation": {}
    },
    {
        "label": "KEY_FILE_PERMISSIONS",
        "kind": 5,
        "importPath": "src.agentvault_mcp.config",
        "description": "src.agentvault_mcp.config",
        "peekOfCode": "KEY_FILE_PERMISSIONS = 0o600\nRECEIPT_TIMEOUT_SECONDS = 120\nMAX_BACKOFF_DELAY = 2.0\nCONTEXT_TRIM_THRESHOLD = 0.9\nCONTEXT_TRIM_TARGET = 0.8\nDEFAULT_MAX_TOKENS = 4096\nDEFAULT_COMPLETION_TOKENS = 512\nDEFAULT_RATE_LIMIT_CALLS = 120\nDEFAULT_RATE_LIMIT_WINDOW = 60\ndef get_rpc_url() -> str:",
        "detail": "src.agentvault_mcp.config",
        "documentation": {}
    },
    {
        "label": "RECEIPT_TIMEOUT_SECONDS",
        "kind": 5,
        "importPath": "src.agentvault_mcp.config",
        "description": "src.agentvault_mcp.config",
        "peekOfCode": "RECEIPT_TIMEOUT_SECONDS = 120\nMAX_BACKOFF_DELAY = 2.0\nCONTEXT_TRIM_THRESHOLD = 0.9\nCONTEXT_TRIM_TARGET = 0.8\nDEFAULT_MAX_TOKENS = 4096\nDEFAULT_COMPLETION_TOKENS = 512\nDEFAULT_RATE_LIMIT_CALLS = 120\nDEFAULT_RATE_LIMIT_WINDOW = 60\ndef get_rpc_url() -> str:\n    \"\"\"Get RPC URL with proper fallback chain.",
        "detail": "src.agentvault_mcp.config",
        "documentation": {}
    },
    {
        "label": "MAX_BACKOFF_DELAY",
        "kind": 5,
        "importPath": "src.agentvault_mcp.config",
        "description": "src.agentvault_mcp.config",
        "peekOfCode": "MAX_BACKOFF_DELAY = 2.0\nCONTEXT_TRIM_THRESHOLD = 0.9\nCONTEXT_TRIM_TARGET = 0.8\nDEFAULT_MAX_TOKENS = 4096\nDEFAULT_COMPLETION_TOKENS = 512\nDEFAULT_RATE_LIMIT_CALLS = 120\nDEFAULT_RATE_LIMIT_WINDOW = 60\ndef get_rpc_url() -> str:\n    \"\"\"Get RPC URL with proper fallback chain.\n    Priority order:",
        "detail": "src.agentvault_mcp.config",
        "documentation": {}
    },
    {
        "label": "CONTEXT_TRIM_THRESHOLD",
        "kind": 5,
        "importPath": "src.agentvault_mcp.config",
        "description": "src.agentvault_mcp.config",
        "peekOfCode": "CONTEXT_TRIM_THRESHOLD = 0.9\nCONTEXT_TRIM_TARGET = 0.8\nDEFAULT_MAX_TOKENS = 4096\nDEFAULT_COMPLETION_TOKENS = 512\nDEFAULT_RATE_LIMIT_CALLS = 120\nDEFAULT_RATE_LIMIT_WINDOW = 60\ndef get_rpc_url() -> str:\n    \"\"\"Get RPC URL with proper fallback chain.\n    Priority order:\n    1. WEB3_RPC_URL environment variable",
        "detail": "src.agentvault_mcp.config",
        "documentation": {}
    },
    {
        "label": "CONTEXT_TRIM_TARGET",
        "kind": 5,
        "importPath": "src.agentvault_mcp.config",
        "description": "src.agentvault_mcp.config",
        "peekOfCode": "CONTEXT_TRIM_TARGET = 0.8\nDEFAULT_MAX_TOKENS = 4096\nDEFAULT_COMPLETION_TOKENS = 512\nDEFAULT_RATE_LIMIT_CALLS = 120\nDEFAULT_RATE_LIMIT_WINDOW = 60\ndef get_rpc_url() -> str:\n    \"\"\"Get RPC URL with proper fallback chain.\n    Priority order:\n    1. WEB3_RPC_URL environment variable\n    2. ALCHEMY_HTTP_URL environment variable",
        "detail": "src.agentvault_mcp.config",
        "documentation": {}
    },
    {
        "label": "DEFAULT_MAX_TOKENS",
        "kind": 5,
        "importPath": "src.agentvault_mcp.config",
        "description": "src.agentvault_mcp.config",
        "peekOfCode": "DEFAULT_MAX_TOKENS = 4096\nDEFAULT_COMPLETION_TOKENS = 512\nDEFAULT_RATE_LIMIT_CALLS = 120\nDEFAULT_RATE_LIMIT_WINDOW = 60\ndef get_rpc_url() -> str:\n    \"\"\"Get RPC URL with proper fallback chain.\n    Priority order:\n    1. WEB3_RPC_URL environment variable\n    2. ALCHEMY_HTTP_URL environment variable\n    3. Auto-generated Alchemy URL from ALCHEMY_API_KEY + ALCHEMY_NETWORK",
        "detail": "src.agentvault_mcp.config",
        "documentation": {}
    },
    {
        "label": "DEFAULT_COMPLETION_TOKENS",
        "kind": 5,
        "importPath": "src.agentvault_mcp.config",
        "description": "src.agentvault_mcp.config",
        "peekOfCode": "DEFAULT_COMPLETION_TOKENS = 512\nDEFAULT_RATE_LIMIT_CALLS = 120\nDEFAULT_RATE_LIMIT_WINDOW = 60\ndef get_rpc_url() -> str:\n    \"\"\"Get RPC URL with proper fallback chain.\n    Priority order:\n    1. WEB3_RPC_URL environment variable\n    2. ALCHEMY_HTTP_URL environment variable\n    3. Auto-generated Alchemy URL from ALCHEMY_API_KEY + ALCHEMY_NETWORK\n    4. Default public Sepolia endpoint",
        "detail": "src.agentvault_mcp.config",
        "documentation": {}
    },
    {
        "label": "DEFAULT_RATE_LIMIT_CALLS",
        "kind": 5,
        "importPath": "src.agentvault_mcp.config",
        "description": "src.agentvault_mcp.config",
        "peekOfCode": "DEFAULT_RATE_LIMIT_CALLS = 120\nDEFAULT_RATE_LIMIT_WINDOW = 60\ndef get_rpc_url() -> str:\n    \"\"\"Get RPC URL with proper fallback chain.\n    Priority order:\n    1. WEB3_RPC_URL environment variable\n    2. ALCHEMY_HTTP_URL environment variable\n    3. Auto-generated Alchemy URL from ALCHEMY_API_KEY + ALCHEMY_NETWORK\n    4. Default public Sepolia endpoint\n    \"\"\"",
        "detail": "src.agentvault_mcp.config",
        "documentation": {}
    },
    {
        "label": "DEFAULT_RATE_LIMIT_WINDOW",
        "kind": 5,
        "importPath": "src.agentvault_mcp.config",
        "description": "src.agentvault_mcp.config",
        "peekOfCode": "DEFAULT_RATE_LIMIT_WINDOW = 60\ndef get_rpc_url() -> str:\n    \"\"\"Get RPC URL with proper fallback chain.\n    Priority order:\n    1. WEB3_RPC_URL environment variable\n    2. ALCHEMY_HTTP_URL environment variable\n    3. Auto-generated Alchemy URL from ALCHEMY_API_KEY + ALCHEMY_NETWORK\n    4. Default public Sepolia endpoint\n    \"\"\"\n    # Check explicit environment variables first",
        "detail": "src.agentvault_mcp.config",
        "documentation": {}
    },
    {
        "label": "ContextSchema",
        "kind": 6,
        "importPath": "src.agentvault_mcp.core",
        "description": "src.agentvault_mcp.core",
        "peekOfCode": "class ContextSchema(BaseModel):\n    \"\"\"MCP Protocol Schema: Validates and structures context.\"\"\"\n    history: List[Dict[str, str]] = Field(\n        default_factory=list, description=\"Conversation history.\"\n    )\n    system_prompt: str = Field(\n        default=\"\", description=\"System-level instructions.\"\n    )\n    state: Dict[str, Any] = Field(\n        default_factory=dict, description=\"Persistent state (e.g., wallet info).\"",
        "detail": "src.agentvault_mcp.core",
        "documentation": {}
    },
    {
        "label": "ContextManager",
        "kind": 6,
        "importPath": "src.agentvault_mcp.core",
        "description": "src.agentvault_mcp.core",
        "peekOfCode": "class ContextManager:\n    \"\"\"Core MCP: Manages context with trimming and state injection.\"\"\"\n    def __init__(\n        self,\n        max_tokens: int = 4096,\n        trim_strategy: str = \"recency\",\n        encoding_name: str = \"o200k_base\",  # Recommended for GPT-4o\n        logger: structlog.stdlib.BoundLogger = logger,\n    ):\n        self.schema = ContextSchema(max_tokens=max_tokens, trim_strategy=trim_strategy)",
        "detail": "src.agentvault_mcp.core",
        "documentation": {}
    },
    {
        "label": "_log_level",
        "kind": 5,
        "importPath": "src.agentvault_mcp.core",
        "description": "src.agentvault_mcp.core",
        "peekOfCode": "_log_level = os.getenv(\"LOG_LEVEL\", \"INFO\").upper()\nlogging.basicConfig(level=getattr(logging, _log_level, logging.INFO))\n# Structured logging setup\nstructlog.configure(\n    processors=[\n        structlog.stdlib.filter_by_level,\n        structlog.stdlib.add_logger_name,\n        structlog.stdlib.add_log_level,\n        structlog.stdlib.PositionalArgumentsFormatter(),\n        structlog.processors.TimeStamper(fmt=\"iso\"),",
        "detail": "src.agentvault_mcp.core",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.agentvault_mcp.core",
        "description": "src.agentvault_mcp.core",
        "peekOfCode": "logger = structlog.get_logger(\"agentvault_mcp\")\nclass ContextSchema(BaseModel):\n    \"\"\"MCP Protocol Schema: Validates and structures context.\"\"\"\n    history: List[Dict[str, str]] = Field(\n        default_factory=list, description=\"Conversation history.\"\n    )\n    system_prompt: str = Field(\n        default=\"\", description=\"System-level instructions.\"\n    )\n    state: Dict[str, Any] = Field(",
        "detail": "src.agentvault_mcp.core",
        "documentation": {}
    },
    {
        "label": "DeFiManager",
        "kind": 6,
        "importPath": "src.agentvault_mcp.defi",
        "description": "src.agentvault_mcp.defi",
        "peekOfCode": "class DeFiManager:\n    \"\"\"Manages DeFi operations for AgentVault.\"\"\"\n    def __init__(self, web3: Web3, chain_id: int = 1):\n        try:\n            self.chain_config: ChainConfig = load_chain_config(chain_id)\n        except ConfigError as exc:\n            raise ValueError(str(exc)) from exc\n        self.web3 = web3\n        self.chain_id = chain_id\n    async def _run(self, func, *args, **kwargs):",
        "detail": "src.agentvault_mcp.defi",
        "documentation": {}
    },
    {
        "label": "NATIVE_ETH",
        "kind": 5,
        "importPath": "src.agentvault_mcp.defi",
        "description": "src.agentvault_mcp.defi",
        "peekOfCode": "NATIVE_ETH = \"0x0000000000000000000000000000000000000000\"\nERC20_METADATA_ABI = [\n    {\n        \"constant\": True,\n        \"inputs\": [],\n        \"name\": \"symbol\",\n        \"outputs\": [{\"name\": \"\", \"type\": \"string\"}],\n        \"type\": \"function\",\n    },\n    {",
        "detail": "src.agentvault_mcp.defi",
        "documentation": {}
    },
    {
        "label": "ERC20_METADATA_ABI",
        "kind": 5,
        "importPath": "src.agentvault_mcp.defi",
        "description": "src.agentvault_mcp.defi",
        "peekOfCode": "ERC20_METADATA_ABI = [\n    {\n        \"constant\": True,\n        \"inputs\": [],\n        \"name\": \"symbol\",\n        \"outputs\": [{\"name\": \"\", \"type\": \"string\"}],\n        \"type\": \"function\",\n    },\n    {\n        \"constant\": True,",
        "detail": "src.agentvault_mcp.defi",
        "documentation": {}
    },
    {
        "label": "V3_POOL_ABI",
        "kind": 5,
        "importPath": "src.agentvault_mcp.defi",
        "description": "src.agentvault_mcp.defi",
        "peekOfCode": "V3_POOL_ABI = json.loads(\n    \"\"\"\n    [\n      {\n        \"inputs\": [],\n        \"name\": \"slot0\",\n        \"outputs\": [\n          {\"internalType\": \"uint160\", \"name\": \"sqrtPriceX96\", \"type\": \"uint160\"},\n          {\"internalType\": \"int24\", \"name\": \"tick\", \"type\": \"int24\"},\n          {\"internalType\": \"uint16\", \"name\": \"observationIndex\", \"type\": \"uint16\"},",
        "detail": "src.agentvault_mcp.defi",
        "documentation": {}
    },
    {
        "label": "ERC20_ALLOWANCE_ABI",
        "kind": 5,
        "importPath": "src.agentvault_mcp.defi",
        "description": "src.agentvault_mcp.defi",
        "peekOfCode": "ERC20_ALLOWANCE_ABI = json.loads(\n    \"\"\"\n    [\n      {\"inputs\": [{\"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\"}, {\"internalType\": \"address\", \"name\": \"spender\", \"type\": \"address\"}], \"name\": \"allowance\", \"outputs\": [{\"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\"}], \"stateMutability\": \"view\", \"type\": \"function\"},\n      {\"inputs\": [{\"internalType\": \"address\", \"name\": \"spender\", \"type\": \"address\"}, {\"internalType\": \"uint256\", \"name\": \"value\", \"type\": \"uint256\"}], \"name\": \"approve\", \"outputs\": [{\"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\"}], \"stateMutability\": \"nonpayable\", \"type\": \"function\"}\n    ]\n    \"\"\"\n)\nUNIVERSAL_ROUTER_ABI = json.loads(\n    \"\"\"",
        "detail": "src.agentvault_mcp.defi",
        "documentation": {}
    },
    {
        "label": "UNIVERSAL_ROUTER_ABI",
        "kind": 5,
        "importPath": "src.agentvault_mcp.defi",
        "description": "src.agentvault_mcp.defi",
        "peekOfCode": "UNIVERSAL_ROUTER_ABI = json.loads(\n    \"\"\"\n    [\n      {\n        \"inputs\": [\n          {\"internalType\": \"bytes\", \"name\": \"commands\", \"type\": \"bytes\"},\n          {\"internalType\": \"bytes[]\", \"name\": \"inputs\", \"type\": \"bytes[]\"},\n          {\"internalType\": \"uint256\", \"name\": \"deadline\", \"type\": \"uint256\"}\n        ],\n        \"name\": \"execute\",",
        "detail": "src.agentvault_mcp.defi",
        "documentation": {}
    },
    {
        "label": "PERMIT2_ABI",
        "kind": 5,
        "importPath": "src.agentvault_mcp.defi",
        "description": "src.agentvault_mcp.defi",
        "peekOfCode": "PERMIT2_ABI = json.loads(\n    \"\"\"\n    [\n      {\n        \"inputs\": [\n          {\"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\"},\n          {\"internalType\": \"address\", \"name\": \"token\", \"type\": \"address\"},\n          {\"internalType\": \"address\", \"name\": \"spender\", \"type\": \"address\"}\n        ],\n        \"name\": \"allowance\",",
        "detail": "src.agentvault_mcp.defi",
        "documentation": {}
    },
    {
        "label": "PERMIT2_MAX_AMOUNT",
        "kind": 5,
        "importPath": "src.agentvault_mcp.defi",
        "description": "src.agentvault_mcp.defi",
        "peekOfCode": "PERMIT2_MAX_AMOUNT = (1 << 160) - 1\nPERMIT2_MAX_EXPIRATION = (1 << 48) - 1\nclass DeFiManager:\n    \"\"\"Manages DeFi operations for AgentVault.\"\"\"\n    def __init__(self, web3: Web3, chain_id: int = 1):\n        try:\n            self.chain_config: ChainConfig = load_chain_config(chain_id)\n        except ConfigError as exc:\n            raise ValueError(str(exc)) from exc\n        self.web3 = web3",
        "detail": "src.agentvault_mcp.defi",
        "documentation": {}
    },
    {
        "label": "PERMIT2_MAX_EXPIRATION",
        "kind": 5,
        "importPath": "src.agentvault_mcp.defi",
        "description": "src.agentvault_mcp.defi",
        "peekOfCode": "PERMIT2_MAX_EXPIRATION = (1 << 48) - 1\nclass DeFiManager:\n    \"\"\"Manages DeFi operations for AgentVault.\"\"\"\n    def __init__(self, web3: Web3, chain_id: int = 1):\n        try:\n            self.chain_config: ChainConfig = load_chain_config(chain_id)\n        except ConfigError as exc:\n            raise ValueError(str(exc)) from exc\n        self.web3 = web3\n        self.chain_id = chain_id",
        "detail": "src.agentvault_mcp.defi",
        "documentation": {}
    },
    {
        "label": "check_text",
        "kind": 2,
        "importPath": "src.agentvault_mcp.guardrail",
        "description": "src.agentvault_mcp.guardrail",
        "peekOfCode": "def check_text(text: str) -> List[str]:\n    \"\"\"Return a list of issues found in text.\n    Issues include banned phrases and missing patch envelope.\n    \"\"\"\n    issues: List[str] = []\n    banned = _load_banned()\n    for pat in banned:\n        if re.search(pat, text, re.IGNORECASE):\n            issues.append(f\"banned phrase matched: {pat}\")\n    has_begin = \"*** Begin Patch\" in text",
        "detail": "src.agentvault_mcp.guardrail",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "src.agentvault_mcp.guardrail",
        "description": "src.agentvault_mcp.guardrail",
        "peekOfCode": "def main(argv: List[str] | None = None) -> int:\n    argv = argv if argv is not None else sys.argv[1:]\n    text = _read_all(argv)\n    issues = check_text(text)\n    if issues:\n        for i in issues:\n            print(i, file=sys.stderr)\n        return 1\n    print(\"guardrail: ok\")\n    return 0",
        "detail": "src.agentvault_mcp.guardrail",
        "documentation": {}
    },
    {
        "label": "DEFAULT_BANNED",
        "kind": 5,
        "importPath": "src.agentvault_mcp.guardrail",
        "description": "src.agentvault_mcp.guardrail",
        "peekOfCode": "DEFAULT_BANNED = [\n    r\"\\bTODO\\b\",\n    r\"\\bplaceholder\\b\",\n    r\"\\bskeleton\\b\",\n    r\"pseudo-?code\",\n    r\"\\.\\.\\.\",  # ellipses\n]\ndef _load_banned() -> List[str]:\n    raw = os.getenv(\"AGENTVAULT_BANNED\")\n    if not raw:",
        "detail": "src.agentvault_mcp.guardrail",
        "documentation": {}
    },
    {
        "label": "ChainConfig",
        "kind": 6,
        "importPath": "src.agentvault_mcp.network_config",
        "description": "src.agentvault_mcp.network_config",
        "peekOfCode": "class ChainConfig:\n    chain_id: int\n    name: str\n    tokens: Dict[str, str]\n    swap_mode: str  # e.g. \"legacy_v3\" or \"universal_router\"\n    uniswap: Dict[str, Any]\n    aave: Dict[str, Any]\nclass ConfigError(RuntimeError):\n    pass\ndef load_chain_config(chain_id: int) -> ChainConfig:",
        "detail": "src.agentvault_mcp.network_config",
        "documentation": {}
    },
    {
        "label": "ConfigError",
        "kind": 6,
        "importPath": "src.agentvault_mcp.network_config",
        "description": "src.agentvault_mcp.network_config",
        "peekOfCode": "class ConfigError(RuntimeError):\n    pass\ndef load_chain_config(chain_id: int) -> ChainConfig:\n    if chain_id == 11155111:\n        return _load_sepolia()\n    if chain_id == 1:\n        return ChainConfig(\n            chain_id=1,\n            name=\"ethereum\",\n            tokens={",
        "detail": "src.agentvault_mcp.network_config",
        "documentation": {}
    },
    {
        "label": "load_chain_config",
        "kind": 2,
        "importPath": "src.agentvault_mcp.network_config",
        "description": "src.agentvault_mcp.network_config",
        "peekOfCode": "def load_chain_config(chain_id: int) -> ChainConfig:\n    if chain_id == 11155111:\n        return _load_sepolia()\n    if chain_id == 1:\n        return ChainConfig(\n            chain_id=1,\n            name=\"ethereum\",\n            tokens={\n                \"ETH\": \"0x0000000000000000000000000000000000000000\",\n                \"WETH\": \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",",
        "detail": "src.agentvault_mcp.network_config",
        "documentation": {}
    },
    {
        "label": "RateLimitRule",
        "kind": 6,
        "importPath": "src.agentvault_mcp.policy",
        "description": "src.agentvault_mcp.policy",
        "peekOfCode": "class RateLimitRule:\n    max_calls: int\n    window_seconds: int\n    @classmethod\n    def from_dict(cls, data: Dict[str, Any]) -> \"RateLimitRule\":\n        return cls(\n            max_calls=int(data.get(\"max_calls\", 60)),\n            window_seconds=int(data.get(\"window_seconds\", 60)),\n        )\n@dataclass",
        "detail": "src.agentvault_mcp.policy",
        "documentation": {}
    },
    {
        "label": "PolicyConfig",
        "kind": 6,
        "importPath": "src.agentvault_mcp.policy",
        "description": "src.agentvault_mcp.policy",
        "peekOfCode": "class PolicyConfig:\n    default_rate_limit: RateLimitRule\n    tool_overrides: Dict[str, RateLimitRule]\n    @classmethod\n    def load(cls, path: Optional[str] = None) -> \"PolicyConfig\":\n        path_obj = Path(path or os.getenv(\"VAULTPILOT_POLICY_PATH\", DEFAULT_POLICY_PATH))\n        if not path_obj.exists():\n            return cls(\n                default_rate_limit=RateLimitRule(max_calls=120, window_seconds=60),\n                tool_overrides={},",
        "detail": "src.agentvault_mcp.policy",
        "documentation": {}
    },
    {
        "label": "PolicyEngine",
        "kind": 6,
        "importPath": "src.agentvault_mcp.policy",
        "description": "src.agentvault_mcp.policy",
        "peekOfCode": "class PolicyEngine:\n    def __init__(\n        self,\n        session_maker,\n        config: PolicyConfig,\n        *,\n        config_path: Optional[str] = None,\n    ) -> None:\n        self._session_maker = session_maker\n        self._config = config",
        "detail": "src.agentvault_mcp.policy",
        "documentation": {}
    },
    {
        "label": "extract_agent_id",
        "kind": 2,
        "importPath": "src.agentvault_mcp.policy",
        "description": "src.agentvault_mcp.policy",
        "peekOfCode": "def extract_agent_id(kwargs: Dict[str, Any]) -> Optional[str]:\n    for key in (\"agent_id\", \"agent\", \"address\"):\n        if key in kwargs and isinstance(kwargs[key], str):\n            return kwargs[key]\n    return None\nasync def run_with_policy(\n    engine: PolicyEngine,\n    *,\n    tool_name: str,\n    agent_id: Optional[str],",
        "detail": "src.agentvault_mcp.policy",
        "documentation": {}
    },
    {
        "label": "DEFAULT_POLICY_PATH",
        "kind": 5,
        "importPath": "src.agentvault_mcp.policy",
        "description": "src.agentvault_mcp.policy",
        "peekOfCode": "DEFAULT_POLICY_PATH = \"vaultpilot_policy.yml\"\n@dataclass\nclass RateLimitRule:\n    max_calls: int\n    window_seconds: int\n    @classmethod\n    def from_dict(cls, data: Dict[str, Any]) -> \"RateLimitRule\":\n        return cls(\n            max_calls=int(data.get(\"max_calls\", 60)),\n            window_seconds=int(data.get(\"window_seconds\", 60)),",
        "detail": "src.agentvault_mcp.policy",
        "documentation": {}
    },
    {
        "label": "policy_guard",
        "kind": 2,
        "importPath": "src.agentvault_mcp.server",
        "description": "src.agentvault_mcp.server",
        "peekOfCode": "def policy_guard(\n    tool_name: str,\n    *,\n    agent_field: str | None = None,\n    redact_fields: tuple[str, ...] = (),\n):\n    def decorator(func: Callable[..., Any]) -> Callable[..., Any]:\n        async def wrapper(*args: Any, **kwargs: Any) -> Any:\n            agent_id = None\n            if agent_field:",
        "detail": "src.agentvault_mcp.server",
        "documentation": {}
    },
    {
        "label": "cli",
        "kind": 2,
        "importPath": "src.agentvault_mcp.server",
        "description": "src.agentvault_mcp.server",
        "peekOfCode": "def cli() -> None:\n    asyncio.run(main())\n# Register prompts and resources using FastMCP API\n@server.prompt()\nasync def wallet_status(agent_id: str) -> list:\n    \"\"\"Summarize wallet status for an agent.\"\"\"\n    if _wallet_mgr is None:\n        content = \"Server not initialized\"\n    else:\n        try:",
        "detail": "src.agentvault_mcp.server",
        "documentation": {}
    },
    {
        "label": "server",
        "kind": 5,
        "importPath": "src.agentvault_mcp.server",
        "description": "src.agentvault_mcp.server",
        "peekOfCode": "server = FastMCP(\"agentvault-mcp\")\n_context_mgr: ContextManager | None = None\n_wallet_mgr: AgentWalletManager | None = None\n_strategy_mgr: StrategyManager | None = None\n_policy_engine: PolicyEngine | None = None\nasync def _policy_execute(\n    tool_name: str,\n    agent_id: str | None,\n    request_payload: dict[str, Any] | None,\n    coro_factory: Callable[[], Any],",
        "detail": "src.agentvault_mcp.server",
        "documentation": {}
    },
    {
        "label": "DcaStrategy",
        "kind": 6,
        "importPath": "src.agentvault_mcp.strategy_manager",
        "description": "src.agentvault_mcp.strategy_manager",
        "peekOfCode": "class DcaStrategy:\n    label: str\n    agent_id: str\n    to_address: str\n    amount_eth: float\n    interval_seconds: int\n    enabled: bool = False\n    max_base_fee_gwei: Optional[float] = None\n    daily_cap_eth: Optional[float] = None\n    next_run_at: Optional[str] = None",
        "detail": "src.agentvault_mcp.strategy_manager",
        "documentation": {}
    },
    {
        "label": "StrategyManager",
        "kind": 6,
        "importPath": "src.agentvault_mcp.strategy_manager",
        "description": "src.agentvault_mcp.strategy_manager",
        "peekOfCode": "class StrategyManager:\n    def __init__(self, wallet: AgentWalletManager):\n        self.wallet = wallet\n        self.session_maker = wallet.session_maker\n        self._locks: Dict[str, asyncio.Lock] = {}\n    def _get_lock(self, label: str) -> asyncio.Lock:\n        if label not in self._locks:\n            self._locks[label] = asyncio.Lock()\n        return self._locks[label]\n    def _record_to_strategy(self, record: Strategy) -> DcaStrategy:",
        "detail": "src.agentvault_mcp.strategy_manager",
        "documentation": {}
    },
    {
        "label": "eth_payment_uri",
        "kind": 2,
        "importPath": "src.agentvault_mcp.tipjar",
        "description": "src.agentvault_mcp.tipjar",
        "peekOfCode": "def eth_payment_uri(address: str, amount_eth: Optional[float] = None) -> str:\n    \"\"\"Build an EIP-681-ish payment URI.\n    Uses decimal wei for value if amount provided.\n    \"\"\"\n    addr = address\n    if amount_eth is None:\n        return f\"ethereum:{addr}\"\n    wei = int(amount_eth * 10**18)\n    return f\"ethereum:{addr}?value={wei}\"\ndef generate_tipjar_qr(",
        "detail": "src.agentvault_mcp.tipjar",
        "documentation": {}
    },
    {
        "label": "generate_tipjar_qr",
        "kind": 2,
        "importPath": "src.agentvault_mcp.tipjar",
        "description": "src.agentvault_mcp.tipjar",
        "peekOfCode": "def generate_tipjar_qr(\n    address: str, out_path: str, amount_eth: Optional[float] = None\n) -> str:\n    \"\"\"Generate a QR PNG for an ETH payment URI and save to out_path.\n    Returns the output path.\n    \"\"\"\n    uri = eth_payment_uri(address, amount_eth)\n    qr = segno.make(uri, micro=False)\n    qr.save(out_path, scale=5, border=2)\n    return out_path",
        "detail": "src.agentvault_mcp.tipjar",
        "documentation": {}
    },
    {
        "label": "tipjar_page_html",
        "kind": 2,
        "importPath": "src.agentvault_mcp.ui",
        "description": "src.agentvault_mcp.ui",
        "peekOfCode": "def tipjar_page_html(address: str, amount_eth: Optional[float] = None) -> str:\n    uri = eth_uri(address, amount_eth)\n    svg = _svg_qr_for_uri(uri)\n    amt_txt = f\" for {amount_eth} ETH\" if amount_eth is not None else \"\"\n    return f\"\"\"\n<!doctype html>\n<meta charset=\"utf-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n<title>Tip Jar</title>\n<style>{_STYLE}</style>",
        "detail": "src.agentvault_mcp.ui",
        "documentation": {}
    },
    {
        "label": "write_tipjar_page",
        "kind": 2,
        "importPath": "src.agentvault_mcp.ui",
        "description": "src.agentvault_mcp.ui",
        "peekOfCode": "def write_tipjar_page(path: str, address: str, amount_eth: Optional[float] = None) -> str:\n    html = tipjar_page_html(address, amount_eth)\n    with open(path, \"w\", encoding=\"utf-8\") as f:\n        f.write(html)\n    return path\ndef eth_uri(address: str, amount_eth: Optional[float] = None) -> str:\n    if amount_eth is None:\n        return f\"ethereum:{address}\"\n    wei = int(amount_eth * 10**18)\n    return f\"ethereum:{address}?value={wei}\"",
        "detail": "src.agentvault_mcp.ui",
        "documentation": {}
    },
    {
        "label": "eth_uri",
        "kind": 2,
        "importPath": "src.agentvault_mcp.ui",
        "description": "src.agentvault_mcp.ui",
        "peekOfCode": "def eth_uri(address: str, amount_eth: Optional[float] = None) -> str:\n    if amount_eth is None:\n        return f\"ethereum:{address}\"\n    wei = int(amount_eth * 10**18)\n    return f\"ethereum:{address}?value={wei}\"\ndef dashboard_html(\n    wallets: List[Dict[str, str]],\n    strategies: Dict[str, Dict],\n    events: Optional[List[Dict[str, Any]]] = None,\n    usage: Optional[List[Dict[str, Any]]] = None,",
        "detail": "src.agentvault_mcp.ui",
        "documentation": {}
    },
    {
        "label": "dashboard_html",
        "kind": 2,
        "importPath": "src.agentvault_mcp.ui",
        "description": "src.agentvault_mcp.ui",
        "peekOfCode": "def dashboard_html(\n    wallets: List[Dict[str, str]],\n    strategies: Dict[str, Dict],\n    events: Optional[List[Dict[str, Any]]] = None,\n    usage: Optional[List[Dict[str, Any]]] = None,\n) -> str:\n    w_rows = \"\".join(\n        f\"<div class='card'>\"\n        f\"<div class='row'><div class='label'>Agent</div><div class='mono'>{w.get('agent_id')}</div></div>\"\n        f\"<div class='row'><div class='label'>Address</div><div class='mono'>{w.get('address')}</div>\"",
        "detail": "src.agentvault_mcp.ui",
        "documentation": {}
    },
    {
        "label": "write_dashboard_page",
        "kind": 2,
        "importPath": "src.agentvault_mcp.ui",
        "description": "src.agentvault_mcp.ui",
        "peekOfCode": "def write_dashboard_page(\n    path: str,\n    wallets: List[Dict[str, str]],\n    strategies: Dict[str, Dict],\n    events: Optional[List[Dict[str, Any]]] = None,\n) -> str:\n    html = dashboard_html(wallets, strategies, events)\n    with open(path, \"w\", encoding=\"utf-8\") as f:\n        f.write(html)\n    return path",
        "detail": "src.agentvault_mcp.ui",
        "documentation": {}
    },
    {
        "label": "_STYLE",
        "kind": 5,
        "importPath": "src.agentvault_mcp.ui",
        "description": "src.agentvault_mcp.ui",
        "peekOfCode": "_STYLE = \"\"\"\n:root { --bg:#ffffff; --fg:#111111; --muted:#666666; --card:#ffffff; }\n[data-theme=\"dark\"] { --bg:#0c0c0c; --fg:#f5f5f5; --muted:#9a9a9a; --card:#111111; }\n* { box-sizing: border-box; }\nhtml, body { margin:0; padding:0; background:var(--bg); color:var(--fg);\n  font: 16px/1.45 system-ui, -apple-system, Segoe UI, Roboto, Ubuntu,\n    Cantarell, Noto Sans, Helvetica, Arial, sans-serif; }\n.wrap { max-width: 880px; margin: 0 auto; padding: 24px; }\n.card { border: 3px solid var(--fg); padding: 20px; margin: 16px 0;\n  background:var(--card); }",
        "detail": "src.agentvault_mcp.ui",
        "documentation": {}
    },
    {
        "label": "WalletState",
        "kind": 6,
        "importPath": "src.agentvault_mcp.wallet",
        "description": "src.agentvault_mcp.wallet",
        "peekOfCode": "class WalletState(BaseModel):\n    wallet_id: str\n    address: str\n    encrypted_privkey: bytes\n    chain_id: int\n    last_nonce: int | None = None\nclass AgentWalletManager:\n    \"\"\"Wallet-specific MCP layer: Secure, async wallet ops with context integration.\"\"\"\n    def __init__(\n        self,",
        "detail": "src.agentvault_mcp.wallet",
        "documentation": {}
    },
    {
        "label": "AgentWalletManager",
        "kind": 6,
        "importPath": "src.agentvault_mcp.wallet",
        "description": "src.agentvault_mcp.wallet",
        "peekOfCode": "class AgentWalletManager:\n    \"\"\"Wallet-specific MCP layer: Secure, async wallet ops with context integration.\"\"\"\n    def __init__(\n        self,\n        context_manager: ContextManager,\n        web3_adapter: Web3Adapter,\n        encrypt_key: str,\n        *,\n        database_url: str | None = None,\n        tenant_id: str = \"default\",",
        "detail": "src.agentvault_mcp.wallet",
        "documentation": {}
    },
    {
        "label": "_ERC20_METADATA_ABI",
        "kind": 5,
        "importPath": "src.agentvault_mcp.wallet",
        "description": "src.agentvault_mcp.wallet",
        "peekOfCode": "_ERC20_METADATA_ABI = [\n    {\n        \"constant\": True,\n        \"inputs\": [],\n        \"name\": \"symbol\",\n        \"outputs\": [{\"name\": \"\", \"type\": \"string\"}],\n        \"type\": \"function\",\n    },\n    {\n        \"constant\": True,",
        "detail": "src.agentvault_mcp.wallet",
        "documentation": {}
    },
    {
        "label": "test_guardrail_ok_with_patch",
        "kind": 2,
        "importPath": "tests.test_guardrail",
        "description": "tests.test_guardrail",
        "peekOfCode": "def test_guardrail_ok_with_patch():\n    txt = (\n        \"*** Begin Patch\\n*** Update File: a.py\\n@@\\n- a\\n+ b\\n*** End Patch\\n\"\n    )\n    assert check_text(txt) == []\ndef test_guardrail_flags_banned_and_missing_patch():\n    txt = \"This is a TODO with ... and no patch\"\n    issues = check_text(txt)\n    assert any(\"banned\" in i for i in issues)\n    assert any(\"no unified diff\" in i for i in issues)",
        "detail": "tests.test_guardrail",
        "documentation": {}
    },
    {
        "label": "test_guardrail_flags_banned_and_missing_patch",
        "kind": 2,
        "importPath": "tests.test_guardrail",
        "description": "tests.test_guardrail",
        "peekOfCode": "def test_guardrail_flags_banned_and_missing_patch():\n    txt = \"This is a TODO with ... and no patch\"\n    issues = check_text(txt)\n    assert any(\"banned\" in i for i in issues)\n    assert any(\"no unified diff\" in i for i in issues)",
        "detail": "tests.test_guardrail",
        "documentation": {}
    },
    {
        "label": "DummyWeb3",
        "kind": 6,
        "importPath": "tests.test_policy",
        "description": "tests.test_policy",
        "peekOfCode": "class DummyWeb3:\n    class Eth:\n        chain_id = 11155111\n    eth = Eth()\n    async def ensure_connection(self):\n        return True\n    async def get_nonce(self, *_):\n        return 0\nclass DummyAdapter:\n    def __init__(self):",
        "detail": "tests.test_policy",
        "documentation": {}
    },
    {
        "label": "DummyAdapter",
        "kind": 6,
        "importPath": "tests.test_policy",
        "description": "tests.test_policy",
        "peekOfCode": "class DummyAdapter:\n    def __init__(self):\n        self.w3 = DummyWeb3()\n    async def ensure_connection(self):\n        return True\ndef _make_engine(tmp_path):\n    ctx = ContextManager()\n    mgr = AgentWalletManager(\n        ctx,\n        DummyAdapter(),",
        "detail": "tests.test_policy",
        "documentation": {}
    },
    {
        "label": "_W3",
        "kind": 6,
        "importPath": "tests.test_strategies",
        "description": "tests.test_strategies",
        "peekOfCode": "class _W3:\n    def __init__(self, base_fee_wei: int):\n        class Eth:\n            def __init__(self, base_fee):\n                self._base_fee = base_fee\n                self.chain_id = 11155111\n            async def get_block(self, *_):\n                return {\"baseFeePerGas\": self._base_fee}\n        self.eth = Eth(base_fee_wei)\n    def from_wei(self, v, unit):",
        "detail": "tests.test_strategies",
        "documentation": {}
    },
    {
        "label": "_Web3Adapter",
        "kind": 6,
        "importPath": "tests.test_strategies",
        "description": "tests.test_strategies",
        "peekOfCode": "class _Web3Adapter:\n    def __init__(self, base_fee_wei: int):\n        self.w3 = _W3(base_fee_wei)\n    async def ensure_connection(self):\n        return True\n    async def get_nonce(self, *_):\n        return 0\n    async def get_block_latest(self):\n        return await self.w3.eth.get_block(\"latest\")\n    def from_wei(self, v, unit):",
        "detail": "tests.test_strategies",
        "documentation": {}
    },
    {
        "label": "_Web3",
        "kind": 6,
        "importPath": "tests.test_strategy_manager",
        "description": "tests.test_strategy_manager",
        "peekOfCode": "class _Web3:\n    class Eth:\n        chain_id = 11155111\n        async def get_block(self, *_):\n            return {\"baseFeePerGas\": 1 * 10**9}\n    eth = Eth()\n    def from_wei(self, v, unit):\n        if unit == \"gwei\":\n            return v / 10**9\n        if unit == \"ether\":",
        "detail": "tests.test_strategy_manager",
        "documentation": {}
    },
    {
        "label": "_Web3Adapter",
        "kind": 6,
        "importPath": "tests.test_strategy_manager",
        "description": "tests.test_strategy_manager",
        "peekOfCode": "class _Web3Adapter:\n    def __init__(self):\n        self.w3 = _Web3()\n    async def ensure_connection(self):\n        return True\n    async def get_nonce(self, *_):\n        return 0\n    async def get_block_latest(self):\n        return await self.w3.eth.get_block(\"latest\")\n    def from_wei(self, v, unit):",
        "detail": "tests.test_strategy_manager",
        "documentation": {}
    },
    {
        "label": "test_tipjar_page_html_contains_svg_and_uri",
        "kind": 2,
        "importPath": "tests.test_ui",
        "description": "tests.test_ui",
        "peekOfCode": "def test_tipjar_page_html_contains_svg_and_uri():\n    html = tipjar_page_html(\"0x\" + \"1\" * 40, 0.01)\n    assert \"ethereum:\" in html\n    assert \"<svg\" in html\n    assert \"Toggle Theme\" in html\n    assert \"Copy\" in html\n@pytest.mark.skipif(not _HAS_SEGNO, reason=\"segno not installed; UI tests optional\")\ndef test_dashboard_html_contains_sections():\n    wallets = [\n        {\"agent_id\": \"a\", \"address\": \"0x\" + \"1\" * 40, \"balance_eth\": 0.0},",
        "detail": "tests.test_ui",
        "documentation": {}
    },
    {
        "label": "test_dashboard_html_contains_sections",
        "kind": 2,
        "importPath": "tests.test_ui",
        "description": "tests.test_ui",
        "peekOfCode": "def test_dashboard_html_contains_sections():\n    wallets = [\n        {\"agent_id\": \"a\", \"address\": \"0x\" + \"1\" * 40, \"balance_eth\": 0.0},\n        {\"agent_id\": \"b\", \"address\": \"0x\" + \"2\" * 40, \"balance_eth\": 1.23},\n    ]\n    strategies = {\n        \"s1\": {\n            \"agent_id\": \"a\",\n            \"to_address\": \"0x\" + \"3\" * 40,\n            \"amount_eth\": 0.1,",
        "detail": "tests.test_ui",
        "documentation": {}
    },
    {
        "label": "_Web3AdapterStub",
        "kind": 6,
        "importPath": "tests.test_wallet_extended",
        "description": "tests.test_wallet_extended",
        "peekOfCode": "class _Web3AdapterStub:\n    class _W3:\n        class eth:\n            chain_id = 11155111\n            chain_id = 11155111\n            @staticmethod\n            async def get_block(identifier):\n                return {\n                    \"baseFeePerGas\": 0,\n                    \"number\": 100,",
        "detail": "tests.test_wallet_extended",
        "documentation": {}
    },
    {
        "label": "CONTRACT_ADDR",
        "kind": 5,
        "importPath": "tests.test_wallet_extended",
        "description": "tests.test_wallet_extended",
        "peekOfCode": "CONTRACT_ADDR = \"0x2222222222222222222222222222222222222222\"\nclass _Web3AdapterStub:\n    class _W3:\n        class eth:\n            chain_id = 11155111\n            chain_id = 11155111\n            @staticmethod\n            async def get_block(identifier):\n                return {\n                    \"baseFeePerGas\": 0,",
        "detail": "tests.test_wallet_extended",
        "documentation": {}
    },
    {
        "label": "anyio_backend",
        "kind": 2,
        "importPath": "conftest",
        "description": "conftest",
        "peekOfCode": "def anyio_backend():\n    return \"asyncio\"",
        "detail": "conftest",
        "documentation": {}
    },
    {
        "label": "pytest_plugins",
        "kind": 5,
        "importPath": "conftest",
        "description": "conftest",
        "peekOfCode": "pytest_plugins = (\"pytest_asyncio.plugin\",)\nimport pytest\n@pytest.fixture(scope=\"session\")\ndef anyio_backend():\n    return \"asyncio\"",
        "detail": "conftest",
        "documentation": {}
    }
]